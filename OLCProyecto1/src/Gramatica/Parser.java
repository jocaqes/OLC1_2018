
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Gramatica;

import java_cup.runtime.*;
import Estructuras.Nodo;
import Tabla.Clase;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\256\000\002\002\004\000\002\002\003\000\002\003" +
    "\011\000\002\003\010\000\002\003\010\000\002\003\007" +
    "\000\002\003\010\000\002\003\007\000\002\003\007\000" +
    "\002\003\006\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\004\010\000\002\004\006\000\002\004\007" +
    "\000\002\004\005\000\002\007\005\000\002\007\003\000" +
    "\002\010\005\000\002\010\004\000\002\011\005\000\002" +
    "\011\005\000\002\011\004\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\015\004\000\002\015\010\000\002\015\007\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\003\000\002\020\004\000\002\020\003\000" +
    "\002\020\004\000\002\020\005\000\002\020\006\000\002" +
    "\020\005\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\016\005" +
    "\000\002\016\005\000\002\016\004\000\002\016\003\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\006\000\002\017" +
    "\003\000\002\021\013\000\002\021\012\000\002\021\012" +
    "\000\002\021\011\000\002\021\012\000\002\021\011\000" +
    "\002\021\011\000\002\021\010\000\002\022\013\000\002" +
    "\022\012\000\002\022\012\000\002\022\011\000\002\023" +
    "\006\000\002\023\005\000\002\024\011\000\002\024\010" +
    "\000\002\026\020\000\002\026\017\000\002\026\017\000" +
    "\002\026\016\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\006\000\002\032\006\000\002\032" +
    "\006\000\002\025\013\000\002\025\012\000\002\027\012" +
    "\000\002\027\011\000\002\030\011\000\002\030\010\000" +
    "\002\030\010\000\002\030\007\000\002\031\007\000\002" +
    "\031\006\000\002\033\004\000\002\033\004\000\002\033" +
    "\004\000\002\033\004\000\002\033\004\000\002\033\004" +
    "\000\002\033\010\000\002\033\007\000\002\033\005\000" +
    "\002\033\006\000\002\033\006\000\002\033\005\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\007" +
    "\000\002\033\006\000\002\033\004\000\002\033\005\000" +
    "\002\033\004\000\002\033\005\000\002\034\004\000\002" +
    "\034\004\000\002\034\004\000\002\034\004\000\002\034" +
    "\004\000\002\034\004\000\002\034\010\000\002\034\007" +
    "\000\002\034\005\000\002\034\006\000\002\034\006\000" +
    "\002\034\005\000\002\034\005\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\007\000\002\034\006" +
    "\000\002\034\004\000\002\034\005\000\002\034\004\000" +
    "\002\034\004\000\002\034\005\000\002\035\005\000\002" +
    "\035\003\000\002\012\013\000\002\012\012\000\002\012" +
    "\012\000\002\012\011\000\002\012\012\000\002\012\011" +
    "\000\002\012\011\000\002\012\010\000\002\013\012\000" +
    "\002\013\011\000\002\013\011\000\002\013\010\000\002" +
    "\013\011\000\002\013\010\000\002\013\010\000\002\013" +
    "\007\000\002\036\006\000\002\036\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0198\000\016\004\004\005\015\006\006\007\012\010" +
    "\011\011\014\001\002\000\022\011\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\020\uffdc\065\uffdc\001\002\000" +
    "\004\011\u0195\001\002\000\022\011\uffdd\013\uffdd\014\uffdd" +
    "\015\uffdd\016\uffdd\017\uffdd\020\uffdd\065\uffdd\001\002\000" +
    "\004\002\u0194\001\002\000\004\002\000\001\002\000\004" +
    "\065\102\001\002\000\022\011\uffdf\013\uffdf\014\uffdf\015" +
    "\uffdf\016\uffdf\017\uffdf\020\uffdf\065\uffdf\001\002\000\016" +
    "\004\004\005\015\006\006\007\012\010\u017e\011\u017d\001" +
    "\002\000\004\065\016\001\002\000\022\011\uffde\013\uffde" +
    "\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\065\uffde\001" +
    "\002\000\004\060\017\001\002\000\032\004\004\005\015" +
    "\006\006\007\012\013\036\014\034\015\024\016\035\017" +
    "\032\020\027\061\022\065\033\001\002\000\032\004\004" +
    "\005\015\006\006\007\012\013\036\014\034\015\024\016" +
    "\035\017\032\020\027\061\u0179\065\033\001\002\000\032" +
    "\004\ufff4\005\ufff4\006\ufff4\007\ufff4\013\ufff4\014\ufff4\015" +
    "\ufff4\016\ufff4\017\ufff4\020\ufff4\061\ufff4\065\ufff4\001\002" +
    "\000\004\002\ufff8\001\002\000\010\045\173\053\u0175\056" +
    "\u0174\001\002\000\004\065\uffe6\001\002\000\032\004\ufff3" +
    "\005\ufff3\006\ufff3\007\ufff3\013\ufff3\014\ufff3\015\ufff3\016" +
    "\ufff3\017\ufff3\020\ufff3\061\ufff3\065\ufff3\001\002\000\020" +
    "\013\036\014\034\015\024\016\035\017\032\020\027\065" +
    "\u0159\001\002\000\004\065\uffe1\001\002\000\032\004\ufff2" +
    "\005\ufff2\006\ufff2\007\ufff2\013\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\017\ufff2\020\ufff2\061\ufff2\065\ufff2\001\002\000\004" +
    "\065\u014b\001\002\000\004\065\uffe4\001\002\000\006\054" +
    "\037\065\uffe0\001\002\000\004\065\uffe2\001\002\000\004" +
    "\065\uffe5\001\002\000\004\065\uffe3\001\002\000\022\013" +
    "\036\014\034\015\024\016\035\017\032\020\027\055\040" +
    "\065\041\001\002\000\004\060\u0147\001\002\000\004\065" +
    "\uffe0\001\002\000\004\065\u0146\001\002\000\006\053\044" +
    "\055\045\001\002\000\020\013\036\014\034\015\024\016" +
    "\035\017\032\020\027\065\041\001\002\000\004\060\046" +
    "\001\002\000\046\004\004\005\015\006\006\007\012\013" +
    "\036\014\034\015\024\016\035\017\032\020\027\021\057" +
    "\023\047\024\060\025\070\026\067\032\064\061\054\065" +
    "\065\001\002\000\004\054\u0111\001\002\000\012\045\173" +
    "\052\170\054\u010a\056\u0109\001\002\000\050\004\uff8c\005" +
    "\uff8c\006\uff8c\007\uff8c\013\uff8c\014\uff8c\015\uff8c\016\uff8c" +
    "\017\uff8c\020\uff8c\021\uff8c\023\uff8c\024\uff8c\025\uff8c\026" +
    "\uff8c\031\uff8c\032\uff8c\061\uff8c\065\uff8c\001\002\000\050" +
    "\004\uff88\005\uff88\006\uff88\007\uff88\013\uff88\014\uff88\015" +
    "\uff88\016\uff88\017\uff88\020\uff88\021\uff88\023\uff88\024\uff88" +
    "\025\uff88\026\uff88\031\uff88\032\uff88\061\uff88\065\uff88\001" +
    "\002\000\046\004\004\005\015\006\006\007\012\013\036" +
    "\014\034\015\024\016\035\017\032\020\027\021\057\023" +
    "\047\024\060\025\070\026\067\032\134\061\u0107\065\065" +
    "\001\002\000\032\004\uff58\005\uff58\006\uff58\007\uff58\013" +
    "\uff58\014\uff58\015\uff58\016\uff58\017\uff58\020\uff58\061\uff58" +
    "\065\uff58\001\002\000\050\004\uff89\005\uff89\006\uff89\007" +
    "\uff89\013\uff89\014\uff89\015\uff89\016\uff89\017\uff89\020\uff89" +
    "\021\uff89\023\uff89\024\uff89\025\uff89\026\uff89\031\uff89\032" +
    "\uff89\061\uff89\065\uff89\001\002\000\050\004\uff8d\005\uff8d" +
    "\006\uff8d\007\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d\017" +
    "\uff8d\020\uff8d\021\uff8d\023\uff8d\024\uff8d\025\uff8d\026\uff8d" +
    "\031\uff8d\032\uff8d\061\uff8d\065\uff8d\001\002\000\004\054" +
    "\344\001\002\000\004\060\326\001\002\000\050\004\uff8a" +
    "\005\uff8a\006\uff8a\007\uff8a\013\uff8a\014\uff8a\015\uff8a\016" +
    "\uff8a\017\uff8a\020\uff8a\021\uff8a\023\uff8a\024\uff8a\025\uff8a" +
    "\026\uff8a\031\uff8a\032\uff8a\061\uff8a\065\uff8a\001\002\000" +
    "\020\013\036\014\034\015\024\016\035\017\032\020\027" +
    "\065\041\001\002\000\004\065\323\001\002\000\030\042" +
    "\141\043\100\044\076\047\077\054\101\056\320\062\072" +
    "\063\073\064\104\065\102\066\074\001\002\000\014\045" +
    "\uffec\052\uffec\054\uffec\056\uffec\065\uffe0\001\002\000\050" +
    "\004\uff8b\005\uff8b\006\uff8b\007\uff8b\013\uff8b\014\uff8b\015" +
    "\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b\023\uff8b\024\uff8b" +
    "\025\uff8b\026\uff8b\031\uff8b\032\uff8b\061\uff8b\065\uff8b\001" +
    "\002\000\004\054\250\001\002\000\004\054\071\001\002" +
    "\000\024\043\100\044\076\047\077\054\101\062\072\063" +
    "\073\064\104\065\102\066\074\001\002\000\042\033\uffcb" +
    "\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\045" +
    "\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\053\uffcb\055\uffcb" +
    "\056\uffcb\057\uffcb\001\002\000\042\033\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\045\uffd4\046\uffd4" +
    "\047\uffd4\050\uffd4\051\uffd4\053\uffd4\055\uffd4\056\uffd4\057" +
    "\uffd4\001\002\000\042\033\uffd2\034\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\045\uffd2\046\uffd2\047\uffd2\050" +
    "\uffd2\051\uffd2\053\uffd2\055\uffd2\056\uffd2\057\uffd2\001\002" +
    "\000\046\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\041\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd" +
    "\052\170\053\uffcd\054\244\055\uffcd\056\uffcd\057\uffcd\001" +
    "\002\000\042\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\040\uffc9\041\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051" +
    "\uffc9\053\uffc9\055\uffc9\056\uffc9\057\uffc9\001\002\000\006" +
    "\063\242\066\243\001\002\000\042\033\uffca\034\uffca\035" +
    "\uffca\036\uffca\037\uffca\040\uffca\041\uffca\045\uffca\046\uffca" +
    "\047\uffca\050\uffca\051\uffca\053\uffca\055\uffca\056\uffca\057" +
    "\uffca\001\002\000\026\042\141\043\100\044\076\047\077" +
    "\054\101\062\072\063\073\064\104\065\102\066\074\001" +
    "\002\000\046\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec" +
    "\040\uffec\041\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051" +
    "\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec" +
    "\001\002\000\014\046\106\047\107\050\111\051\105\055" +
    "\110\001\002\000\042\033\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\041\uffcc\045\uffcc\046\uffcc\047\uffcc\050" +
    "\uffcc\051\uffcc\053\uffcc\055\uffcc\056\uffcc\057\uffcc\001\002" +
    "\000\024\043\100\044\076\047\077\054\101\062\072\063" +
    "\073\064\104\065\102\066\074\001\002\000\024\043\100" +
    "\044\076\047\077\054\101\062\072\063\073\064\104\065" +
    "\102\066\074\001\002\000\024\043\100\044\076\047\077" +
    "\054\101\062\072\063\073\064\104\065\102\066\074\001" +
    "\002\000\004\060\113\001\002\000\024\043\100\044\076" +
    "\047\077\054\101\062\072\063\073\064\104\065\102\066" +
    "\074\001\002\000\042\033\uffd5\034\uffd5\035\uffd5\036\uffd5" +
    "\037\uffd5\040\uffd5\041\uffd5\045\uffd5\046\uffd5\047\uffd5\050" +
    "\uffd5\051\uffd5\053\uffd5\055\uffd5\056\uffd5\057\uffd5\001\002" +
    "\000\004\027\114\001\002\000\024\043\100\044\076\047" +
    "\077\054\101\062\072\063\073\064\104\065\102\066\074" +
    "\001\002\000\010\027\117\030\120\061\121\001\002\000" +
    "\004\061\225\001\002\000\024\043\100\044\076\047\077" +
    "\054\101\062\072\063\073\064\104\065\102\066\074\001" +
    "\002\000\004\057\122\001\002\000\050\004\uffa0\005\uffa0" +
    "\006\uffa0\007\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017" +
    "\uffa0\020\uffa0\021\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0" +
    "\031\uffa0\032\uffa0\061\uffa0\065\uffa0\001\002\000\046\004" +
    "\004\005\015\006\006\007\012\013\036\014\034\015\024" +
    "\016\035\017\032\020\027\021\057\023\047\024\060\025" +
    "\070\026\067\031\124\032\064\065\065\001\002\000\046" +
    "\004\004\005\015\006\006\007\012\013\036\014\034\015" +
    "\024\016\035\017\032\020\027\021\057\023\047\024\060" +
    "\025\070\026\067\031\135\032\134\065\065\001\002\000" +
    "\004\056\125\001\002\000\004\061\uff9a\001\002\000\012" +
    "\045\173\052\170\054\172\056\174\001\002\000\050\004" +
    "\uff98\005\uff98\006\uff98\007\uff98\013\uff98\014\uff98\015\uff98" +
    "\016\uff98\017\uff98\020\uff98\021\uff98\023\uff98\024\uff98\025" +
    "\uff98\026\uff98\031\uff98\032\uff98\061\uff98\065\uff98\001\002" +
    "\000\050\004\uff94\005\uff94\006\uff94\007\uff94\013\uff94\014" +
    "\uff94\015\uff94\016\uff94\017\uff94\020\uff94\021\uff94\023\uff94" +
    "\024\uff94\025\uff94\026\uff94\031\uff94\032\uff94\061\uff94\065" +
    "\uff94\001\002\000\050\004\uff95\005\uff95\006\uff95\007\uff95" +
    "\013\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95\021" +
    "\uff95\023\uff95\024\uff95\025\uff95\026\uff95\031\uff95\032\uff95" +
    "\061\uff95\065\uff95\001\002\000\050\004\uff99\005\uff99\006" +
    "\uff99\007\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99" +
    "\020\uff99\021\uff99\023\uff99\024\uff99\025\uff99\026\uff99\031" +
    "\uff99\032\uff99\061\uff99\065\uff99\001\002\000\050\004\uff96" +
    "\005\uff96\006\uff96\007\uff96\013\uff96\014\uff96\015\uff96\016" +
    "\uff96\017\uff96\020\uff96\021\uff96\023\uff96\024\uff96\025\uff96" +
    "\026\uff96\031\uff96\032\uff96\061\uff96\065\uff96\001\002\000" +
    "\030\042\141\043\100\044\076\047\077\054\101\056\142" +
    "\062\072\063\073\064\104\065\102\066\074\001\002\000" +
    "\004\056\137\001\002\000\050\004\uff97\005\uff97\006\uff97" +
    "\007\uff97\013\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020" +
    "\uff97\021\uff97\023\uff97\024\uff97\025\uff97\026\uff97\031\uff97" +
    "\032\uff97\061\uff97\065\uff97\001\002\000\004\061\uff9b\001" +
    "\002\000\014\040\uffc5\041\uffc5\053\uffc5\055\uffc5\056\uffc5" +
    "\001\002\000\026\042\141\043\100\044\076\047\077\054" +
    "\101\062\072\063\073\064\104\065\102\066\074\001\002" +
    "\000\050\004\uff8e\005\uff8e\006\uff8e\007\uff8e\013\uff8e\014" +
    "\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e\021\uff8e\023\uff8e" +
    "\024\uff8e\025\uff8e\026\uff8e\031\uff8e\032\uff8e\061\uff8e\065" +
    "\uff8e\001\002\000\040\033\153\034\154\035\156\036\155" +
    "\037\152\040\uffbe\041\uffbe\045\157\046\106\047\107\050" +
    "\111\051\105\053\uffbe\055\uffbe\056\uffbe\001\002\000\010" +
    "\040\146\041\147\056\145\001\002\000\050\004\uff8f\005" +
    "\uff8f\006\uff8f\007\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f" +
    "\017\uff8f\020\uff8f\021\uff8f\023\uff8f\024\uff8f\025\uff8f\026" +
    "\uff8f\031\uff8f\032\uff8f\061\uff8f\065\uff8f\001\002\000\026" +
    "\042\141\043\100\044\076\047\077\054\101\062\072\063" +
    "\073\064\104\065\102\066\074\001\002\000\026\042\141" +
    "\043\100\044\076\047\077\054\101\062\072\063\073\064" +
    "\104\065\102\066\074\001\002\000\014\040\146\041\uffc8" +
    "\053\uffc8\055\uffc8\056\uffc8\001\002\000\014\040\uffc7\041" +
    "\uffc7\053\uffc7\055\uffc7\056\uffc7\001\002\000\024\043\100" +
    "\044\076\047\077\054\101\062\072\063\073\064\104\065" +
    "\102\066\074\001\002\000\024\043\100\044\076\047\077" +
    "\054\101\062\072\063\073\064\104\065\102\066\074\001" +
    "\002\000\024\043\100\044\076\047\077\054\101\062\072" +
    "\063\073\064\104\065\102\066\074\001\002\000\024\043" +
    "\100\044\076\047\077\054\101\062\072\063\073\064\104" +
    "\065\102\066\074\001\002\000\024\043\100\044\076\047" +
    "\077\054\101\062\072\063\073\064\104\065\102\066\074" +
    "\001\002\000\004\045\160\001\002\000\024\043\100\044" +
    "\076\047\077\054\101\062\072\063\073\064\104\065\102" +
    "\066\074\001\002\000\024\040\uffbf\041\uffbf\046\106\047" +
    "\107\050\111\051\105\053\uffbf\055\uffbf\056\uffbf\001\002" +
    "\000\024\040\uffc2\041\uffc2\046\106\047\107\050\111\051" +
    "\105\053\uffc2\055\uffc2\056\uffc2\001\002\000\024\040\uffc1" +
    "\041\uffc1\046\106\047\107\050\111\051\105\053\uffc1\055" +
    "\uffc1\056\uffc1\001\002\000\024\040\uffc0\041\uffc0\046\106" +
    "\047\107\050\111\051\105\053\uffc0\055\uffc0\056\uffc0\001" +
    "\002\000\024\040\uffc4\041\uffc4\046\106\047\107\050\111" +
    "\051\105\053\uffc4\055\uffc4\056\uffc4\001\002\000\024\040" +
    "\uffc3\041\uffc3\046\106\047\107\050\111\051\105\053\uffc3" +
    "\055\uffc3\056\uffc3\001\002\000\014\040\uffc6\041\uffc6\053" +
    "\uffc6\055\uffc6\056\uffc6\001\002\000\004\065\215\001\002" +
    "\000\004\056\214\001\002\000\030\042\141\043\100\044" +
    "\076\047\077\054\101\055\207\062\072\063\073\064\104" +
    "\065\102\066\074\001\002\000\030\012\175\042\141\043" +
    "\100\044\076\047\077\054\101\062\072\063\073\064\104" +
    "\065\102\066\074\001\002\000\050\004\uff91\005\uff91\006" +
    "\uff91\007\uff91\013\uff91\014\uff91\015\uff91\016\uff91\017\uff91" +
    "\020\uff91\021\uff91\023\uff91\024\uff91\025\uff91\026\uff91\031" +
    "\uff91\032\uff91\061\uff91\065\uff91\001\002\000\004\065\177" +
    "\001\002\000\010\040\146\041\147\056\uffdb\001\002\000" +
    "\004\054\200\001\002\000\030\042\141\043\100\044\076" +
    "\047\077\054\101\055\201\062\072\063\073\064\104\065" +
    "\102\066\074\001\002\000\004\056\uffd9\001\002\000\006" +
    "\053\204\055\205\001\002\000\012\040\146\041\147\053" +
    "\uff66\055\uff66\001\002\000\026\042\141\043\100\044\076" +
    "\047\077\054\101\062\072\063\073\064\104\065\102\066" +
    "\074\001\002\000\004\056\uffda\001\002\000\012\040\146" +
    "\041\147\053\uff67\055\uff67\001\002\000\004\056\213\001" +
    "\002\000\006\053\204\055\211\001\002\000\004\056\212" +
    "\001\002\000\050\004\uff93\005\uff93\006\uff93\007\uff93\013" +
    "\uff93\014\uff93\015\uff93\016\uff93\017\uff93\020\uff93\021\uff93" +
    "\023\uff93\024\uff93\025\uff93\026\uff93\031\uff93\032\uff93\061" +
    "\uff93\065\uff93\001\002\000\050\004\uff92\005\uff92\006\uff92" +
    "\007\uff92\013\uff92\014\uff92\015\uff92\016\uff92\017\uff92\020" +
    "\uff92\021\uff92\023\uff92\024\uff92\025\uff92\026\uff92\031\uff92" +
    "\032\uff92\061\uff92\065\uff92\001\002\000\050\004\uff90\005" +
    "\uff90\006\uff90\007\uff90\013\uff90\014\uff90\015\uff90\016\uff90" +
    "\017\uff90\020\uff90\021\uff90\023\uff90\024\uff90\025\uff90\026" +
    "\uff90\031\uff90\032\uff90\061\uff90\065\uff90\001\002\000\046" +
    "\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041" +
    "\uffed\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed" +
    "\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed\001\002\000" +
    "\014\046\106\047\107\050\111\051\105\057\217\001\002" +
    "\000\046\004\004\005\015\006\006\007\012\013\036\014" +
    "\034\015\024\016\035\017\032\020\027\021\057\023\047" +
    "\024\060\025\070\026\067\031\221\032\064\065\065\001" +
    "\002\000\046\004\004\005\015\006\006\007\012\013\036" +
    "\014\034\015\024\016\035\017\032\020\027\021\057\023" +
    "\047\024\060\025\070\026\067\031\223\032\134\065\065" +
    "\001\002\000\004\056\222\001\002\000\010\027\uff9e\030" +
    "\uff9e\061\uff9e\001\002\000\004\056\224\001\002\000\010" +
    "\027\uff9f\030\uff9f\061\uff9f\001\002\000\050\004\uffa1\005" +
    "\uffa1\006\uffa1\007\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1" +
    "\017\uffa1\020\uffa1\021\uffa1\023\uffa1\024\uffa1\025\uffa1\026" +
    "\uffa1\031\uffa1\032\uffa1\061\uffa1\065\uffa1\001\002\000\014" +
    "\046\106\047\107\050\111\051\105\057\227\001\002\000" +
    "\046\004\004\005\015\006\006\007\012\013\036\014\034" +
    "\015\024\016\035\017\032\020\027\021\057\023\047\024" +
    "\060\025\070\026\067\031\231\032\064\065\065\001\002" +
    "\000\046\004\004\005\015\006\006\007\012\013\036\014" +
    "\034\015\024\016\035\017\032\020\027\021\057\023\047" +
    "\024\060\025\070\026\067\031\233\032\134\065\065\001" +
    "\002\000\004\056\232\001\002\000\010\027\uff9c\030\uff9c" +
    "\061\uff9c\001\002\000\004\056\234\001\002\000\010\027" +
    "\uff9d\030\uff9d\061\uff9d\001\002\000\042\033\uffd7\034\uffd7" +
    "\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\045\uffd7\046" +
    "\uffd7\047\uffd7\050\111\051\105\053\uffd7\055\uffd7\056\uffd7" +
    "\057\uffd7\001\002\000\042\033\uffd8\034\uffd8\035\uffd8\036" +
    "\uffd8\037\uffd8\040\uffd8\041\uffd8\045\uffd8\046\uffd8\047\uffd8" +
    "\050\111\051\105\053\uffd8\055\uffd8\056\uffd8\057\uffd8\001" +
    "\002\000\042\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\041\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051" +
    "\uffd6\053\uffd6\055\uffd6\056\uffd6\057\uffd6\001\002\000\010" +
    "\040\146\041\147\055\241\001\002\000\042\033\uffd0\034" +
    "\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\045\uffd0" +
    "\046\uffd0\047\uffd0\050\uffd0\051\uffd0\053\uffd0\055\uffd0\056" +
    "\uffd0\057\uffd0\001\002\000\042\033\uffd3\034\uffd3\035\uffd3" +
    "\036\uffd3\037\uffd3\040\uffd3\041\uffd3\045\uffd3\046\uffd3\047" +
    "\uffd3\050\uffd3\051\uffd3\053\uffd3\055\uffd3\056\uffd3\057\uffd3" +
    "\001\002\000\042\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037" +
    "\uffd1\040\uffd1\041\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1" +
    "\051\uffd1\053\uffd1\055\uffd1\056\uffd1\057\uffd1\001\002\000" +
    "\030\042\141\043\100\044\076\047\077\054\101\055\245" +
    "\062\072\063\073\064\104\065\102\066\074\001\002\000" +
    "\042\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce" +
    "\041\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce\053" +
    "\uffce\055\uffce\056\uffce\057\uffce\001\002\000\006\053\204" +
    "\055\247\001\002\000\042\033\uffcf\034\uffcf\035\uffcf\036" +
    "\uffcf\037\uffcf\040\uffcf\041\uffcf\045\uffcf\046\uffcf\047\uffcf" +
    "\050\uffcf\051\uffcf\053\uffcf\055\uffcf\056\uffcf\057\uffcf\001" +
    "\002\000\006\013\251\065\252\001\002\000\004\065\304" +
    "\001\002\000\004\045\253\001\002\000\024\043\100\044" +
    "\076\047\077\054\101\062\072\063\073\064\104\065\102" +
    "\066\074\001\002\000\014\046\106\047\107\050\111\051" +
    "\105\056\255\001\002\000\026\042\141\043\100\044\076" +
    "\047\077\054\101\062\072\063\073\064\104\065\102\066" +
    "\074\001\002\000\010\040\146\041\147\056\257\001\002" +
    "\000\004\065\261\001\002\000\004\055\277\001\002\000" +
    "\012\045\263\046\264\047\265\051\262\001\002\000\004" +
    "\045\275\001\002\000\024\043\100\044\076\047\077\054" +
    "\101\062\072\063\073\064\104\065\102\066\074\001\002" +
    "\000\006\045\271\046\272\001\002\000\006\045\266\047" +
    "\267\001\002\000\024\043\100\044\076\047\077\054\101" +
    "\062\072\063\073\064\104\065\102\066\074\001\002\000" +
    "\004\055\uffa8\001\002\000\014\046\106\047\107\050\111" +
    "\051\105\055\uffa5\001\002\000\024\043\100\044\076\047" +
    "\077\054\101\062\072\063\073\064\104\065\102\066\074" +
    "\001\002\000\004\055\uffa9\001\002\000\014\046\106\047" +
    "\107\050\111\051\105\055\uffa6\001\002\000\014\046\106" +
    "\047\107\050\111\051\105\055\uffa7\001\002\000\024\043" +
    "\100\044\076\047\077\054\101\062\072\063\073\064\104" +
    "\065\102\066\074\001\002\000\014\046\106\047\107\050" +
    "\111\051\105\055\uffa4\001\002\000\004\060\300\001\002" +
    "\000\046\004\004\005\015\006\006\007\012\013\036\014" +
    "\034\015\024\016\035\017\032\020\027\021\057\023\047" +
    "\024\060\025\070\026\067\032\064\061\302\065\065\001" +
    "\002\000\046\004\004\005\015\006\006\007\012\013\036" +
    "\014\034\015\024\016\035\017\032\020\027\021\057\023" +
    "\047\024\060\025\070\026\067\032\134\061\303\065\065" +
    "\001\002\000\050\004\uffaa\005\uffaa\006\uffaa\007\uffaa\013" +
    "\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa" +
    "\023\uffaa\024\uffaa\025\uffaa\026\uffaa\031\uffaa\032\uffaa\061" +
    "\uffaa\065\uffaa\001\002\000\050\004\uffac\005\uffac\006\uffac" +
    "\007\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020" +
    "\uffac\021\uffac\023\uffac\024\uffac\025\uffac\026\uffac\031\uffac" +
    "\032\uffac\061\uffac\065\uffac\001\002\000\004\045\305\001" +
    "\002\000\024\043\100\044\076\047\077\054\101\062\072" +
    "\063\073\064\104\065\102\066\074\001\002\000\014\046" +
    "\106\047\107\050\111\051\105\056\307\001\002\000\026" +
    "\042\141\043\100\044\076\047\077\054\101\062\072\063" +
    "\073\064\104\065\102\066\074\001\002\000\010\040\146" +
    "\041\147\056\311\001\002\000\004\065\261\001\002\000" +
    "\004\055\313\001\002\000\004\060\314\001\002\000\046" +
    "\004\004\005\015\006\006\007\012\013\036\014\034\015" +
    "\024\016\035\017\032\020\027\021\057\023\047\024\060" +
    "\025\070\026\067\032\064\061\316\065\065\001\002\000" +
    "\046\004\004\005\015\006\006\007\012\013\036\014\034" +
    "\015\024\016\035\017\032\020\027\021\057\023\047\024" +
    "\060\025\070\026\067\032\134\061\317\065\065\001\002" +
    "\000\050\004\uffab\005\uffab\006\uffab\007\uffab\013\uffab\014" +
    "\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\023\uffab" +
    "\024\uffab\025\uffab\026\uffab\031\uffab\032\uffab\061\uffab\065" +
    "\uffab\001\002\000\050\004\uffad\005\uffad\006\uffad\007\uffad" +
    "\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021" +
    "\uffad\023\uffad\024\uffad\025\uffad\026\uffad\031\uffad\032\uffad" +
    "\061\uffad\065\uffad\001\002\000\050\004\uff83\005\uff83\006" +
    "\uff83\007\uff83\013\uff83\014\uff83\015\uff83\016\uff83\017\uff83" +
    "\020\uff83\021\uff83\023\uff83\024\uff83\025\uff83\026\uff83\031" +
    "\uff83\032\uff83\061\uff83\065\uff83\001\002\000\010\040\146" +
    "\041\147\056\322\001\002\000\050\004\uff82\005\uff82\006" +
    "\uff82\007\uff82\013\uff82\014\uff82\015\uff82\016\uff82\017\uff82" +
    "\020\uff82\021\uff82\023\uff82\024\uff82\025\uff82\026\uff82\031" +
    "\uff82\032\uff82\061\uff82\065\uff82\001\002\000\010\045\uffe7" +
    "\053\uffe7\056\uffe7\001\002\000\004\065\325\001\002\000" +
    "\010\045\uffe8\053\uffe8\056\uffe8\001\002\000\046\004\004" +
    "\005\015\006\006\007\012\013\036\014\034\015\024\016" +
    "\035\017\032\020\027\021\057\023\047\024\060\025\070" +
    "\026\067\032\064\061\330\065\065\001\002\000\046\004" +
    "\004\005\015\006\006\007\012\013\036\014\034\015\024" +
    "\016\035\017\032\020\027\021\057\023\047\024\060\025" +
    "\070\026\067\032\134\061\336\065\065\001\002\000\004" +
    "\023\331\001\002\000\004\054\332\001\002\000\026\042" +
    "\141\043\100\044\076\047\077\054\101\062\072\063\073" +
    "\064\104\065\102\066\074\001\002\000\010\040\146\041" +
    "\147\055\334\001\002\000\004\056\335\001\002\000\050" +
    "\004\uffa2\005\uffa2\006\uffa2\007\uffa2\013\uffa2\014\uffa2\015" +
    "\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\023\uffa2\024\uffa2" +
    "\025\uffa2\026\uffa2\031\uffa2\032\uffa2\061\uffa2\065\uffa2\001" +
    "\002\000\004\023\337\001\002\000\004\054\340\001\002" +
    "\000\026\042\141\043\100\044\076\047\077\054\101\062" +
    "\072\063\073\064\104\065\102\066\074\001\002\000\010" +
    "\040\146\041\147\055\342\001\002\000\004\056\343\001" +
    "\002\000\050\004\uffa3\005\uffa3\006\uffa3\007\uffa3\013\uffa3" +
    "\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\023" +
    "\uffa3\024\uffa3\025\uffa3\026\uffa3\031\uffa3\032\uffa3\061\uffa3" +
    "\065\uffa3\001\002\000\026\042\141\043\100\044\076\047" +
    "\077\054\101\062\072\063\073\064\104\065\102\066\074" +
    "\001\002\000\010\040\146\041\147\055\346\001\002\000" +
    "\004\060\347\001\002\000\046\004\004\005\015\006\006" +
    "\007\012\013\036\014\034\015\024\016\035\017\032\020" +
    "\027\021\057\023\047\024\060\025\070\026\067\032\064" +
    "\061\351\065\065\001\002\000\046\004\004\005\015\006" +
    "\006\007\012\013\036\014\034\015\024\016\035\017\032" +
    "\020\027\021\057\023\047\024\060\025\070\026\067\032" +
    "\134\061\u0103\065\065\001\002\000\052\004\uffb6\005\uffb6" +
    "\006\uffb6\007\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017" +
    "\uffb6\020\uffb6\021\uffb6\022\352\023\uffb6\024\uffb6\025\uffb6" +
    "\026\uffb6\031\uffb6\032\uffb6\061\uffb6\065\uffb6\001\002\000" +
    "\006\021\373\060\357\001\002\000\050\004\uffb7\005\uffb7" +
    "\006\uffb7\007\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017" +
    "\uffb7\020\uffb7\021\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7" +
    "\031\uffb7\032\uffb7\061\uffb7\065\uffb7\001\002\000\052\004" +
    "\uffb8\005\uffb8\006\uffb8\007\uffb8\013\uffb8\014\uffb8\015\uffb8" +
    "\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\355\023\uffb8\024" +
    "\uffb8\025\uffb8\026\uffb8\031\uffb8\032\uffb8\061\uffb8\065\uffb8" +
    "\001\002\000\006\021\360\060\357\001\002\000\050\004" +
    "\uffb9\005\uffb9\006\uffb9\007\uffb9\013\uffb9\014\uffb9\015\uffb9" +
    "\016\uffb9\017\uffb9\020\uffb9\021\uffb9\023\uffb9\024\uffb9\025" +
    "\uffb9\026\uffb9\031\uffb9\032\uffb9\061\uffb9\065\uffb9\001\002" +
    "\000\046\004\004\005\015\006\006\007\012\013\036\014" +
    "\034\015\024\016\035\017\032\020\027\021\057\023\047" +
    "\024\060\025\070\026\067\032\064\061\371\065\065\001" +
    "\002\000\004\054\361\001\002\000\026\042\141\043\100" +
    "\044\076\047\077\054\101\062\072\063\073\064\104\065" +
    "\102\066\074\001\002\000\010\040\146\041\147\055\363" +
    "\001\002\000\004\060\364\001\002\000\046\004\004\005" +
    "\015\006\006\007\012\013\036\014\034\015\024\016\035" +
    "\017\032\020\027\021\057\023\047\024\060\025\070\026" +
    "\067\032\064\061\366\065\065\001\002\000\046\004\004" +
    "\005\015\006\006\007\012\013\036\014\034\015\024\016" +
    "\035\017\032\020\027\021\057\023\047\024\060\025\070" +
    "\026\067\032\134\061\367\065\065\001\002\000\052\004" +
    "\uffb4\005\uffb4\006\uffb4\007\uffb4\013\uffb4\014\uffb4\015\uffb4" +
    "\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024" +
    "\uffb4\025\uffb4\026\uffb4\031\uffb4\032\uffb4\061\uffb4\065\uffb4" +
    "\001\002\000\052\004\uffb5\005\uffb5\006\uffb5\007\uffb5\013" +
    "\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5" +
    "\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\031\uffb5\032" +
    "\uffb5\061\uffb5\065\uffb5\001\002\000\046\004\004\005\015" +
    "\006\006\007\012\013\036\014\034\015\024\016\035\017" +
    "\032\020\027\021\057\023\047\024\060\025\070\026\067" +
    "\032\134\061\372\065\065\001\002\000\050\004\uffb0\005" +
    "\uffb0\006\uffb0\007\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0" +
    "\017\uffb0\020\uffb0\021\uffb0\023\uffb0\024\uffb0\025\uffb0\026" +
    "\uffb0\031\uffb0\032\uffb0\061\uffb0\065\uffb0\001\002\000\050" +
    "\004\uffb1\005\uffb1\006\uffb1\007\uffb1\013\uffb1\014\uffb1\015" +
    "\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\023\uffb1\024\uffb1" +
    "\025\uffb1\026\uffb1\031\uffb1\032\uffb1\061\uffb1\065\uffb1\001" +
    "\002\000\004\054\374\001\002\000\026\042\141\043\100" +
    "\044\076\047\077\054\101\062\072\063\073\064\104\065" +
    "\102\066\074\001\002\000\010\040\146\041\147\055\376" +
    "\001\002\000\004\060\377\001\002\000\046\004\004\005" +
    "\015\006\006\007\012\013\036\014\034\015\024\016\035" +
    "\017\032\020\027\021\057\023\047\024\060\025\070\026" +
    "\067\032\064\061\u0101\065\065\001\002\000\046\004\004" +
    "\005\015\006\006\007\012\013\036\014\034\015\024\016" +
    "\035\017\032\020\027\021\057\023\047\024\060\025\070" +
    "\026\067\032\134\061\u0102\065\065\001\002\000\052\004" +
    "\uffb2\005\uffb2\006\uffb2\007\uffb2\013\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024" +
    "\uffb2\025\uffb2\026\uffb2\031\uffb2\032\uffb2\061\uffb2\065\uffb2" +
    "\001\002\000\052\004\uffb3\005\uffb3\006\uffb3\007\uffb3\013" +
    "\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3" +
    "\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\031\uffb3\032" +
    "\uffb3\061\uffb3\065\uffb3\001\002\000\052\004\uffba\005\uffba" +
    "\006\uffba\007\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017" +
    "\uffba\020\uffba\021\uffba\022\352\023\uffba\024\uffba\025\uffba" +
    "\026\uffba\031\uffba\032\uffba\061\uffba\065\uffba\001\002\000" +
    "\050\004\uffbb\005\uffbb\006\uffbb\007\uffbb\013\uffbb\014\uffbb" +
    "\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\023\uffbb\024" +
    "\uffbb\025\uffbb\026\uffbb\031\uffbb\032\uffbb\061\uffbb\065\uffbb" +
    "\001\002\000\052\004\uffbc\005\uffbc\006\uffbc\007\uffbc\013" +
    "\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\022\355\023\uffbc\024\uffbc\025\uffbc\026\uffbc\031\uffbc\032" +
    "\uffbc\061\uffbc\065\uffbc\001\002\000\050\004\uffbd\005\uffbd" +
    "\006\uffbd\007\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017" +
    "\uffbd\020\uffbd\021\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd" +
    "\031\uffbd\032\uffbd\061\uffbd\065\uffbd\001\002\000\032\004" +
    "\uff59\005\uff59\006\uff59\007\uff59\013\uff59\014\uff59\015\uff59" +
    "\016\uff59\017\uff59\020\uff59\061\uff59\065\uff59\001\002\000" +
    "\004\056\u0110\001\002\000\050\004\uff85\005\uff85\006\uff85" +
    "\007\uff85\013\uff85\014\uff85\015\uff85\016\uff85\017\uff85\020" +
    "\uff85\021\uff85\023\uff85\024\uff85\025\uff85\026\uff85\031\uff85" +
    "\032\uff85\061\uff85\065\uff85\001\002\000\030\042\141\043" +
    "\100\044\076\047\077\054\101\055\u010b\062\072\063\073" +
    "\064\104\065\102\066\074\001\002\000\004\056\u010f\001" +
    "\002\000\006\053\204\055\u010d\001\002\000\004\056\u010e" +
    "\001\002\000\050\004\uff87\005\uff87\006\uff87\007\uff87\013" +
    "\uff87\014\uff87\015\uff87\016\uff87\017\uff87\020\uff87\021\uff87" +
    "\023\uff87\024\uff87\025\uff87\026\uff87\031\uff87\032\uff87\061" +
    "\uff87\065\uff87\001\002\000\050\004\uff86\005\uff86\006\uff86" +
    "\007\uff86\013\uff86\014\uff86\015\uff86\016\uff86\017\uff86\020" +
    "\uff86\021\uff86\023\uff86\024\uff86\025\uff86\026\uff86\031\uff86" +
    "\032\uff86\061\uff86\065\uff86\001\002\000\050\004\uff84\005" +
    "\uff84\006\uff84\007\uff84\013\uff84\014\uff84\015\uff84\016\uff84" +
    "\017\uff84\020\uff84\021\uff84\023\uff84\024\uff84\025\uff84\026" +
    "\uff84\031\uff84\032\uff84\061\uff84\065\uff84\001\002\000\026" +
    "\042\141\043\100\044\076\047\077\054\101\062\072\063" +
    "\073\064\104\065\102\066\074\001\002\000\010\040\146" +
    "\041\147\055\u0113\001\002\000\004\060\u0114\001\002\000" +
    "\050\004\004\005\015\006\006\007\012\013\036\014\034" +
    "\015\024\016\035\017\032\020\027\021\057\023\047\024" +
    "\060\025\070\026\067\031\u011e\032\u011d\061\u0119\065\065" +
    "\001\002\000\012\045\173\052\170\054\u013d\056\u013c\001" +
    "\002\000\050\004\uff73\005\uff73\006\uff73\007\uff73\013\uff73" +
    "\014\uff73\015\uff73\016\uff73\017\uff73\020\uff73\021\uff73\023" +
    "\uff73\024\uff73\025\uff73\026\uff73\031\uff73\032\uff73\061\uff73" +
    "\065\uff73\001\002\000\050\004\004\005\015\006\006\007" +
    "\012\013\036\014\034\015\024\016\035\017\032\020\027" +
    "\021\057\023\047\024\060\025\070\026\067\031\u012c\032" +
    "\u012b\061\u0127\065\065\001\002\000\050\004\uff6f\005\uff6f" +
    "\006\uff6f\007\uff6f\013\uff6f\014\uff6f\015\uff6f\016\uff6f\017" +
    "\uff6f\020\uff6f\021\uff6f\023\uff6f\024\uff6f\025\uff6f\026\uff6f" +
    "\031\uff6f\032\uff6f\061\uff6f\065\uff6f\001\002\000\050\004" +
    "\uffae\005\uffae\006\uffae\007\uffae\013\uffae\014\uffae\015\uffae" +
    "\016\uffae\017\uffae\020\uffae\021\uffae\023\uffae\024\uffae\025" +
    "\uffae\026\uffae\031\uffae\032\uffae\061\uffae\065\uffae\001\002" +
    "\000\050\004\uff70\005\uff70\006\uff70\007\uff70\013\uff70\014" +
    "\uff70\015\uff70\016\uff70\017\uff70\020\uff70\021\uff70\023\uff70" +
    "\024\uff70\025\uff70\026\uff70\031\uff70\032\uff70\061\uff70\065" +
    "\uff70\001\002\000\050\004\uff74\005\uff74\006\uff74\007\uff74" +
    "\013\uff74\014\uff74\015\uff74\016\uff74\017\uff74\020\uff74\021" +
    "\uff74\023\uff74\024\uff74\025\uff74\026\uff74\031\uff74\032\uff74" +
    "\061\uff74\065\uff74\001\002\000\050\004\uff71\005\uff71\006" +
    "\uff71\007\uff71\013\uff71\014\uff71\015\uff71\016\uff71\017\uff71" +
    "\020\uff71\021\uff71\023\uff71\024\uff71\025\uff71\026\uff71\031" +
    "\uff71\032\uff71\061\uff71\065\uff71\001\002\000\030\042\141" +
    "\043\100\044\076\047\077\054\101\056\u0121\062\072\063" +
    "\073\064\104\065\102\066\074\001\002\000\004\056\u0120" +
    "\001\002\000\050\004\uff72\005\uff72\006\uff72\007\uff72\013" +
    "\uff72\014\uff72\015\uff72\016\uff72\017\uff72\020\uff72\021\uff72" +
    "\023\uff72\024\uff72\025\uff72\026\uff72\031\uff72\032\uff72\061" +
    "\uff72\065\uff72\001\002\000\050\004\uff6a\005\uff6a\006\uff6a" +
    "\007\uff6a\013\uff6a\014\uff6a\015\uff6a\016\uff6a\017\uff6a\020" +
    "\uff6a\021\uff6a\023\uff6a\024\uff6a\025\uff6a\026\uff6a\031\uff6a" +
    "\032\uff6a\061\uff6a\065\uff6a\001\002\000\050\004\uff69\005" +
    "\uff69\006\uff69\007\uff69\013\uff69\014\uff69\015\uff69\016\uff69" +
    "\017\uff69\020\uff69\021\uff69\023\uff69\024\uff69\025\uff69\026" +
    "\uff69\031\uff69\032\uff69\061\uff69\065\uff69\001\002\000\010" +
    "\040\146\041\147\056\u0123\001\002\000\050\004\uff68\005" +
    "\uff68\006\uff68\007\uff68\013\uff68\014\uff68\015\uff68\016\uff68" +
    "\017\uff68\020\uff68\021\uff68\023\uff68\024\uff68\025\uff68\026" +
    "\uff68\031\uff68\032\uff68\061\uff68\065\uff68\001\002\000\012" +
    "\045\173\052\170\054\u0134\056\u0133\001\002\000\050\004" +
    "\uff80\005\uff80\006\uff80\007\uff80\013\uff80\014\uff80\015\uff80" +
    "\016\uff80\017\uff80\020\uff80\021\uff80\023\uff80\024\uff80\025" +
    "\uff80\026\uff80\031\uff80\032\uff80\061\uff80\065\uff80\001\002" +
    "\000\050\004\uff7c\005\uff7c\006\uff7c\007\uff7c\013\uff7c\014" +
    "\uff7c\015\uff7c\016\uff7c\017\uff7c\020\uff7c\021\uff7c\023\uff7c" +
    "\024\uff7c\025\uff7c\026\uff7c\031\uff7c\032\uff7c\061\uff7c\065" +
    "\uff7c\001\002\000\050\004\uffaf\005\uffaf\006\uffaf\007\uffaf" +
    "\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021" +
    "\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\031\uffaf\032\uffaf" +
    "\061\uffaf\065\uffaf\001\002\000\050\004\uff7d\005\uff7d\006" +
    "\uff7d\007\uff7d\013\uff7d\014\uff7d\015\uff7d\016\uff7d\017\uff7d" +
    "\020\uff7d\021\uff7d\023\uff7d\024\uff7d\025\uff7d\026\uff7d\031" +
    "\uff7d\032\uff7d\061\uff7d\065\uff7d\001\002\000\050\004\uff81" +
    "\005\uff81\006\uff81\007\uff81\013\uff81\014\uff81\015\uff81\016" +
    "\uff81\017\uff81\020\uff81\021\uff81\023\uff81\024\uff81\025\uff81" +
    "\026\uff81\031\uff81\032\uff81\061\uff81\065\uff81\001\002\000" +
    "\050\004\uff7e\005\uff7e\006\uff7e\007\uff7e\013\uff7e\014\uff7e" +
    "\015\uff7e\016\uff7e\017\uff7e\020\uff7e\021\uff7e\023\uff7e\024" +
    "\uff7e\025\uff7e\026\uff7e\031\uff7e\032\uff7e\061\uff7e\065\uff7e" +
    "\001\002\000\030\042\141\043\100\044\076\047\077\054" +
    "\101\056\u012f\062\072\063\073\064\104\065\102\066\074" +
    "\001\002\000\004\056\u012e\001\002\000\050\004\uff7f\005" +
    "\uff7f\006\uff7f\007\uff7f\013\uff7f\014\uff7f\015\uff7f\016\uff7f" +
    "\017\uff7f\020\uff7f\021\uff7f\023\uff7f\024\uff7f\025\uff7f\026" +
    "\uff7f\031\uff7f\032\uff7f\061\uff7f\065\uff7f\001\002\000\050" +
    "\004\uff75\005\uff75\006\uff75\007\uff75\013\uff75\014\uff75\015" +
    "\uff75\016\uff75\017\uff75\020\uff75\021\uff75\023\uff75\024\uff75" +
    "\025\uff75\026\uff75\031\uff75\032\uff75\061\uff75\065\uff75\001" +
    "\002\000\050\004\uff76\005\uff76\006\uff76\007\uff76\013\uff76" +
    "\014\uff76\015\uff76\016\uff76\017\uff76\020\uff76\021\uff76\023" +
    "\uff76\024\uff76\025\uff76\026\uff76\031\uff76\032\uff76\061\uff76" +
    "\065\uff76\001\002\000\010\040\146\041\147\056\u0131\001" +
    "\002\000\050\004\uff77\005\uff77\006\uff77\007\uff77\013\uff77" +
    "\014\uff77\015\uff77\016\uff77\017\uff77\020\uff77\021\uff77\023" +
    "\uff77\024\uff77\025\uff77\026\uff77\031\uff77\032\uff77\061\uff77" +
    "\065\uff77\001\002\000\004\056\u013a\001\002\000\050\004" +
    "\uff79\005\uff79\006\uff79\007\uff79\013\uff79\014\uff79\015\uff79" +
    "\016\uff79\017\uff79\020\uff79\021\uff79\023\uff79\024\uff79\025" +
    "\uff79\026\uff79\031\uff79\032\uff79\061\uff79\065\uff79\001\002" +
    "\000\030\042\141\043\100\044\076\047\077\054\101\055" +
    "\u0135\062\072\063\073\064\104\065\102\066\074\001\002" +
    "\000\004\056\u0139\001\002\000\006\053\204\055\u0137\001" +
    "\002\000\004\056\u0138\001\002\000\050\004\uff7b\005\uff7b" +
    "\006\uff7b\007\uff7b\013\uff7b\014\uff7b\015\uff7b\016\uff7b\017" +
    "\uff7b\020\uff7b\021\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b" +
    "\031\uff7b\032\uff7b\061\uff7b\065\uff7b\001\002\000\050\004" +
    "\uff7a\005\uff7a\006\uff7a\007\uff7a\013\uff7a\014\uff7a\015\uff7a" +
    "\016\uff7a\017\uff7a\020\uff7a\021\uff7a\023\uff7a\024\uff7a\025" +
    "\uff7a\026\uff7a\031\uff7a\032\uff7a\061\uff7a\065\uff7a\001\002" +
    "\000\050\004\uff78\005\uff78\006\uff78\007\uff78\013\uff78\014" +
    "\uff78\015\uff78\016\uff78\017\uff78\020\uff78\021\uff78\023\uff78" +
    "\024\uff78\025\uff78\026\uff78\031\uff78\032\uff78\061\uff78\065" +
    "\uff78\001\002\000\004\056\u0143\001\002\000\050\004\uff6c" +
    "\005\uff6c\006\uff6c\007\uff6c\013\uff6c\014\uff6c\015\uff6c\016" +
    "\uff6c\017\uff6c\020\uff6c\021\uff6c\023\uff6c\024\uff6c\025\uff6c" +
    "\026\uff6c\031\uff6c\032\uff6c\061\uff6c\065\uff6c\001\002\000" +
    "\030\042\141\043\100\044\076\047\077\054\101\055\u013e" +
    "\062\072\063\073\064\104\065\102\066\074\001\002\000" +
    "\004\056\u0142\001\002\000\006\053\204\055\u0140\001\002" +
    "\000\004\056\u0141\001\002\000\050\004\uff6e\005\uff6e\006" +
    "\uff6e\007\uff6e\013\uff6e\014\uff6e\015\uff6e\016\uff6e\017\uff6e" +
    "\020\uff6e\021\uff6e\023\uff6e\024\uff6e\025\uff6e\026\uff6e\031" +
    "\uff6e\032\uff6e\061\uff6e\065\uff6e\001\002\000\050\004\uff6d" +
    "\005\uff6d\006\uff6d\007\uff6d\013\uff6d\014\uff6d\015\uff6d\016" +
    "\uff6d\017\uff6d\020\uff6d\021\uff6d\023\uff6d\024\uff6d\025\uff6d" +
    "\026\uff6d\031\uff6d\032\uff6d\061\uff6d\065\uff6d\001\002\000" +
    "\050\004\uff6b\005\uff6b\006\uff6b\007\uff6b\013\uff6b\014\uff6b" +
    "\015\uff6b\016\uff6b\017\uff6b\020\uff6b\021\uff6b\023\uff6b\024" +
    "\uff6b\025\uff6b\026\uff6b\031\uff6b\032\uff6b\061\uff6b\065\uff6b" +
    "\001\002\000\004\065\u0145\001\002\000\006\053\uff55\055" +
    "\uff55\001\002\000\006\053\uff54\055\uff54\001\002\000\046" +
    "\004\004\005\015\006\006\007\012\013\036\014\034\015" +
    "\024\016\035\017\032\020\027\021\057\023\047\024\060" +
    "\025\070\026\067\032\064\061\u0149\065\065\001\002\000" +
    "\046\004\004\005\015\006\006\007\012\013\036\014\034" +
    "\015\024\016\035\017\032\020\027\021\057\023\047\024" +
    "\060\025\070\026\067\032\134\061\u014a\065\065\001\002" +
    "\000\032\004\uff56\005\uff56\006\uff56\007\uff56\013\uff56\014" +
    "\uff56\015\uff56\016\uff56\017\uff56\020\uff56\061\uff56\065\uff56" +
    "\001\002\000\032\004\uff57\005\uff57\006\uff57\007\uff57\013" +
    "\uff57\014\uff57\015\uff57\016\uff57\017\uff57\020\uff57\061\uff57" +
    "\065\uff57\001\002\000\012\045\uffe7\053\uffe7\054\u014c\056" +
    "\uffe7\001\002\000\022\013\036\014\034\015\024\016\035" +
    "\017\032\020\027\055\u014d\065\041\001\002\000\004\060" +
    "\u0154\001\002\000\006\053\044\055\u014f\001\002\000\004" +
    "\060\u0150\001\002\000\046\004\004\005\015\006\006\007" +
    "\012\013\036\014\034\015\024\016\035\017\032\020\027" +
    "\021\057\023\047\024\060\025\070\026\067\032\064\061" +
    "\u0152\065\065\001\002\000\046\004\004\005\015\006\006" +
    "\007\012\013\036\014\034\015\024\016\035\017\032\020" +
    "\027\021\057\023\047\024\060\025\070\026\067\032\134" +
    "\061\u0153\065\065\001\002\000\032\004\uff60\005\uff60\006" +
    "\uff60\007\uff60\013\uff60\014\uff60\015\uff60\016\uff60\017\uff60" +
    "\020\uff60\061\uff60\065\uff60\001\002\000\032\004\uff61\005" +
    "\uff61\006\uff61\007\uff61\013\uff61\014\uff61\015\uff61\016\uff61" +
    "\017\uff61\020\uff61\061\uff61\065\uff61\001\002\000\046\004" +
    "\004\005\015\006\006\007\012\013\036\014\034\015\024" +
    "\016\035\017\032\020\027\021\057\023\047\024\060\025" +
    "\070\026\067\032\064\061\u0156\065\065\001\002\000\046" +
    "\004\004\005\015\006\006\007\012\013\036\014\034\015" +
    "\024\016\035\017\032\020\027\021\057\023\047\024\060" +
    "\025\070\026\067\032\134\061\u0157\065\065\001\002\000" +
    "\032\004\uff5e\005\uff5e\006\uff5e\007\uff5e\013\uff5e\014\uff5e" +
    "\015\uff5e\016\uff5e\017\uff5e\020\uff5e\061\uff5e\065\uff5e\001" +
    "\002\000\032\004\uff5f\005\uff5f\006\uff5f\007\uff5f\013\uff5f" +
    "\014\uff5f\015\uff5f\016\uff5f\017\uff5f\020\uff5f\061\uff5f\065" +
    "\uff5f\001\002\000\004\065\u0166\001\002\000\006\054\u015a" +
    "\065\uffe0\001\002\000\022\013\036\014\034\015\024\016" +
    "\035\017\032\020\027\055\u015b\065\041\001\002\000\004" +
    "\060\u0162\001\002\000\006\053\044\055\u015d\001\002\000" +
    "\004\060\u015e\001\002\000\046\004\004\005\015\006\006" +
    "\007\012\013\036\014\034\015\024\016\035\017\032\020" +
    "\027\021\057\023\047\024\060\025\070\026\067\032\064" +
    "\061\u0160\065\065\001\002\000\046\004\004\005\015\006" +
    "\006\007\012\013\036\014\034\015\024\016\035\017\032" +
    "\020\027\021\057\023\047\024\060\025\070\026\067\032" +
    "\134\061\u0161\065\065\001\002\000\032\004\uff5c\005\uff5c" +
    "\006\uff5c\007\uff5c\013\uff5c\014\uff5c\015\uff5c\016\uff5c\017" +
    "\uff5c\020\uff5c\061\uff5c\065\uff5c\001\002\000\032\004\uff5d" +
    "\005\uff5d\006\uff5d\007\uff5d\013\uff5d\014\uff5d\015\uff5d\016" +
    "\uff5d\017\uff5d\020\uff5d\061\uff5d\065\uff5d\001\002\000\046" +
    "\004\004\005\015\006\006\007\012\013\036\014\034\015" +
    "\024\016\035\017\032\020\027\021\057\023\047\024\060" +
    "\025\070\026\067\032\064\061\u0164\065\065\001\002\000" +
    "\046\004\004\005\015\006\006\007\012\013\036\014\034" +
    "\015\024\016\035\017\032\020\027\021\057\023\047\024" +
    "\060\025\070\026\067\032\134\061\u0165\065\065\001\002" +
    "\000\032\004\uff5a\005\uff5a\006\uff5a\007\uff5a\013\uff5a\014" +
    "\uff5a\015\uff5a\016\uff5a\017\uff5a\020\uff5a\061\uff5a\065\uff5a" +
    "\001\002\000\032\004\uff5b\005\uff5b\006\uff5b\007\uff5b\013" +
    "\uff5b\014\uff5b\015\uff5b\016\uff5b\017\uff5b\020\uff5b\061\uff5b" +
    "\065\uff5b\001\002\000\012\045\uffe8\053\uffe8\054\u0167\056" +
    "\uffe8\001\002\000\022\013\036\014\034\015\024\016\035" +
    "\017\032\020\027\055\u0168\065\041\001\002\000\004\060" +
    "\u016f\001\002\000\006\053\044\055\u016a\001\002\000\004" +
    "\060\u016b\001\002\000\046\004\004\005\015\006\006\007" +
    "\012\013\036\014\034\015\024\016\035\017\032\020\027" +
    "\021\057\023\047\024\060\025\070\026\067\032\064\061" +
    "\u016d\065\065\001\002\000\046\004\004\005\015\006\006" +
    "\007\012\013\036\014\034\015\024\016\035\017\032\020" +
    "\027\021\057\023\047\024\060\025\070\026\067\032\134" +
    "\061\u016e\065\065\001\002\000\032\004\uff64\005\uff64\006" +
    "\uff64\007\uff64\013\uff64\014\uff64\015\uff64\016\uff64\017\uff64" +
    "\020\uff64\061\uff64\065\uff64\001\002\000\032\004\uff65\005" +
    "\uff65\006\uff65\007\uff65\013\uff65\014\uff65\015\uff65\016\uff65" +
    "\017\uff65\020\uff65\061\uff65\065\uff65\001\002\000\046\004" +
    "\004\005\015\006\006\007\012\013\036\014\034\015\024" +
    "\016\035\017\032\020\027\021\057\023\047\024\060\025" +
    "\070\026\067\032\064\061\u0171\065\065\001\002\000\046" +
    "\004\004\005\015\006\006\007\012\013\036\014\034\015" +
    "\024\016\035\017\032\020\027\021\057\023\047\024\060" +
    "\025\070\026\067\032\134\061\u0172\065\065\001\002\000" +
    "\032\004\uff62\005\uff62\006\uff62\007\uff62\013\uff62\014\uff62" +
    "\015\uff62\016\uff62\017\uff62\020\uff62\061\uff62\065\uff62\001" +
    "\002\000\032\004\uff63\005\uff63\006\uff63\007\uff63\013\uff63" +
    "\014\uff63\015\uff63\016\uff63\017\uff63\020\uff63\061\uff63\065" +
    "\uff63\001\002\000\004\056\u0177\001\002\000\050\004\uffea" +
    "\005\uffea\006\uffea\007\uffea\013\uffea\014\uffea\015\uffea\016" +
    "\uffea\017\uffea\020\uffea\021\uffea\023\uffea\024\uffea\025\uffea" +
    "\026\uffea\031\uffea\032\uffea\061\uffea\065\uffea\001\002\000" +
    "\004\065\u0176\001\002\000\010\045\uffe9\053\uffe9\056\uffe9" +
    "\001\002\000\050\004\uffeb\005\uffeb\006\uffeb\007\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb" +
    "\023\uffeb\024\uffeb\025\uffeb\026\uffeb\031\uffeb\032\uffeb\061" +
    "\uffeb\065\uffeb\001\002\000\032\004\ufff7\005\ufff7\006\ufff7" +
    "\007\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020" +
    "\ufff7\061\ufff7\065\ufff7\001\002\000\004\002\ufffc\001\002" +
    "\000\032\004\ufff6\005\ufff6\006\ufff6\007\ufff6\013\ufff6\014" +
    "\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\061\ufff6\065\ufff6" +
    "\001\002\000\032\004\ufff5\005\ufff5\006\ufff5\007\ufff5\013" +
    "\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\061\ufff5" +
    "\065\ufff5\001\002\000\004\011\u0189\001\002\000\004\065" +
    "\u0184\001\002\000\004\065\102\001\002\000\006\052\u0180" +
    "\056\u0181\001\002\000\006\051\u0182\065\215\001\002\000" +
    "\016\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0" +
    "\001\002\000\004\056\u0183\001\002\000\016\004\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\001\002\000\004" +
    "\060\u0185\001\002\000\032\004\004\005\015\006\006\007" +
    "\012\013\036\014\034\015\024\016\035\017\032\020\027" +
    "\061\u0187\065\033\001\002\000\032\004\004\005\015\006" +
    "\006\007\012\013\036\014\034\015\024\016\035\017\032" +
    "\020\027\061\u0188\065\033\001\002\000\004\002\ufff9\001" +
    "\002\000\004\002\ufffd\001\002\000\004\065\u018a\001\002" +
    "\000\004\060\u018b\001\002\000\032\004\004\005\015\006" +
    "\006\007\012\013\036\014\034\015\024\016\035\017\032" +
    "\020\027\061\u018d\065\033\001\002\000\032\004\004\005" +
    "\015\006\006\007\012\013\036\014\034\015\024\016\035" +
    "\017\032\020\027\061\u018e\065\033\001\002\000\004\002" +
    "\ufffb\001\002\000\004\002\uffff\001\002\000\006\052\u0190" +
    "\056\u0191\001\002\000\006\051\u0192\065\215\001\002\000" +
    "\016\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee" +
    "\001\002\000\004\056\u0193\001\002\000\016\004\uffef\005" +
    "\uffef\006\uffef\007\uffef\010\uffef\011\uffef\001\002\000\004" +
    "\002\001\001\002\000\004\065\u0196\001\002\000\004\060" +
    "\u0197\001\002\000\032\004\004\005\015\006\006\007\012" +
    "\013\036\014\034\015\024\016\035\017\032\020\027\061" +
    "\u0199\065\033\001\002\000\032\004\004\005\015\006\006" +
    "\007\012\013\036\014\034\015\024\016\035\017\032\020" +
    "\027\061\u019a\065\033\001\002\000\004\002\ufffa\001\002" +
    "\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0198\000\012\002\006\003\007\004\012\006\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\u018e\001" +
    "\001\000\002\001\001\000\004\006\u017b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\005" +
    "\017\006\025\010\020\011\022\012\024\013\027\014\030" +
    "\001\001\000\016\006\025\010\u0177\011\022\012\u0179\013" +
    "\u017a\014\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\u0172\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\u0157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\041\036\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\u0143\001\001\000\002\001\001\000\030\006\061\007" +
    "\047\010\051\011\022\014\062\021\055\024\050\025\060" +
    "\026\065\027\054\033\052\001\001\000\002\001\001\000" +
    "\004\015\u0107\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\006\061\007\125\010\127\011\022\014\062\021" +
    "\131\024\126\025\132\026\135\027\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\323" +
    "\001\001\000\002\001\001\000\012\007\074\016\320\017" +
    "\137\020\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\074\020" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\074\016\237\017\137" +
    "\020\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\074\020\236\001\001\000\006" +
    "\007\074\020\235\001\001\000\006\007\074\020\234\001" +
    "\001\000\002\001\001\000\006\007\074\020\111\001\001" +
    "\000\002\001\001\000\004\030\114\001\001\000\006\007" +
    "\074\020\225\001\001\000\004\031\115\001\001\000\002" +
    "\001\001\000\006\007\074\020\215\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\006\061\007\047\010\051" +
    "\011\022\014\062\021\055\024\050\025\060\026\065\027" +
    "\054\033\122\001\001\000\026\006\061\007\125\010\127" +
    "\011\022\014\062\021\131\024\126\025\132\026\135\027" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\074\016\143\017\137\020\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\074\016\166\017\137\020\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\007\074\016\150\017\137\020\142\001" +
    "\001\000\012\007\074\016\147\017\137\020\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\074\020" +
    "\165\001\001\000\006\007\074\020\164\001\001\000\006" +
    "\007\074\020\163\001\001\000\006\007\074\020\162\001" +
    "\001\000\006\007\074\020\161\001\001\000\002\001\001" +
    "\000\006\007\074\020\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\007\074\016\202\017\137" +
    "\020\142\035\207\001\001\000\012\007\074\016\175\017" +
    "\137\020\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\007\074\016" +
    "\202\017\137\020\142\035\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\074\016" +
    "\205\017\137\020\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\006\061\007" +
    "\047\010\051\011\022\014\062\021\055\024\050\025\060" +
    "\026\065\027\054\033\217\001\001\000\026\006\061\007" +
    "\125\010\127\011\022\014\062\021\131\024\126\025\132" +
    "\026\135\027\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\006\061\007\047\010\051\011" +
    "\022\014\062\021\055\024\050\025\060\026\065\027\054" +
    "\033\227\001\001\000\026\006\061\007\125\010\127\011" +
    "\022\014\062\021\131\024\126\025\132\026\135\027\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\007\074\016\202" +
    "\017\137\020\142\035\245\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\074\020\253\001" +
    "\001\000\002\001\001\000\012\007\074\016\255\017\137" +
    "\020\142\001\001\000\002\001\001\000\004\032\257\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\074\020\273\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\074\020\267\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\074\020\272\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\074\020\275\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\006\061\007\047\010\051\011\022" +
    "\014\062\021\055\024\050\025\060\026\065\027\054\033" +
    "\300\001\001\000\026\006\061\007\125\010\127\011\022" +
    "\014\062\021\131\024\126\025\132\026\135\027\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\074\020\305\001\001\000\002\001\001\000" +
    "\012\007\074\016\307\017\137\020\142\001\001\000\002" +
    "\001\001\000\004\032\311\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\006\061\007\047\010\051\011\022" +
    "\014\062\021\055\024\050\025\060\026\065\027\054\033" +
    "\314\001\001\000\026\006\061\007\125\010\127\011\022" +
    "\014\062\021\131\024\126\025\132\026\135\027\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\006\061\007\047" +
    "\010\051\011\022\014\062\021\055\024\050\025\060\026" +
    "\065\027\054\033\326\001\001\000\026\006\061\007\125" +
    "\010\127\011\022\014\062\021\131\024\126\025\132\026" +
    "\135\027\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\074\016\332\017\137\020\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\074\016\340\017" +
    "\137\020\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\074\016\344\017\137\020" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\006\061\007\047\010\051\011\022\014\062\021\055\024" +
    "\050\025\060\026\065\027\054\033\347\001\001\000\026" +
    "\006\061\007\125\010\127\011\022\014\062\021\131\024" +
    "\126\025\132\026\135\027\130\001\001\000\006\022\353" +
    "\023\352\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\355\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\006\061\007\047\010\051\011\022\014\062\021" +
    "\055\024\050\025\060\026\065\027\054\033\367\001\001" +
    "\000\002\001\001\000\012\007\074\016\361\017\137\020" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\006\061\007\047\010\051\011\022\014\062\021\055\024" +
    "\050\025\060\026\065\027\054\033\364\001\001\000\026" +
    "\006\061\007\125\010\127\011\022\014\062\021\131\024" +
    "\126\025\132\026\135\027\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\006\061\007\125\010\127\011" +
    "\022\014\062\021\131\024\126\025\132\026\135\027\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\074\016\374\017\137\020\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\006\061\007" +
    "\047\010\051\011\022\014\062\021\055\024\050\025\060" +
    "\026\065\027\054\033\377\001\001\000\026\006\061\007" +
    "\125\010\127\011\022\014\062\021\131\024\126\025\132" +
    "\026\135\027\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\u0104\023\u0103\001\001\000\002\001\001" +
    "\000\004\023\u0105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\007\074" +
    "\016\202\017\137\020\142\035\u010b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\074\016" +
    "\u0111\017\137\020\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\006\061\007\u0114\010\u0117\011\022\014" +
    "\062\021\u011a\024\u0115\025\u011b\026\u011e\027\u0119\034\u0116" +
    "\001\001\000\004\015\u013a\001\001\000\002\001\001\000" +
    "\026\006\061\007\u0123\010\u0125\011\022\014\062\021\u0128" +
    "\024\u0124\025\u0129\026\u012c\027\u0127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\074\016\u0121\017\137\020" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\u0131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\074\016\u012f\017\137" +
    "\020\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\007" +
    "\074\016\202\017\137\020\142\035\u0135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\074\016\202\017\137\020" +
    "\142\035\u013e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\006\061\007\047\010\051\011\022\014" +
    "\062\021\055\024\050\025\060\026\065\027\054\033\u0147" +
    "\001\001\000\026\006\061\007\125\010\127\011\022\014" +
    "\062\021\131\024\126\025\132\026\135\027\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\041\036\u014d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\006\061\007\047\010" +
    "\051\011\022\014\062\021\055\024\050\025\060\026\065" +
    "\027\054\033\u0150\001\001\000\026\006\061\007\125\010" +
    "\127\011\022\014\062\021\131\024\126\025\132\026\135" +
    "\027\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\006\061\007\047\010\051\011\022\014\062\021\055" +
    "\024\050\025\060\026\065\027\054\033\u0154\001\001\000" +
    "\026\006\061\007\125\010\127\011\022\014\062\021\131" +
    "\024\126\025\132\026\135\027\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\041\036\u015b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\006\061\007\047" +
    "\010\051\011\022\014\062\021\055\024\050\025\060\026" +
    "\065\027\054\033\u015e\001\001\000\026\006\061\007\125" +
    "\010\127\011\022\014\062\021\131\024\126\025\132\026" +
    "\135\027\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\006\061\007\047\010\051\011\022\014\062\021" +
    "\055\024\050\025\060\026\065\027\054\033\u0162\001\001" +
    "\000\026\006\061\007\125\010\127\011\022\014\062\021" +
    "\131\024\126\025\132\026\135\027\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\041\036\u0168\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\006\061\007\047\010\051\011" +
    "\022\014\062\021\055\024\050\025\060\026\065\027\054" +
    "\033\u016b\001\001\000\026\006\061\007\125\010\127\011" +
    "\022\014\062\021\131\024\126\025\132\026\135\027\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\006" +
    "\061\007\047\010\051\011\022\014\062\021\055\024\050" +
    "\025\060\026\065\027\054\033\u016f\001\001\000\026\006" +
    "\061\007\125\010\127\011\022\014\062\021\131\024\126" +
    "\025\132\026\135\027\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\u017e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\005\u0185\006\025\010\020\011\022\012\024\013\027" +
    "\014\030\001\001\000\016\006\025\010\u0177\011\022\012" +
    "\u0179\013\u017a\014\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\005" +
    "\u018b\006\025\010\020\011\022\012\024\013\027\014\030" +
    "\001\001\000\016\006\025\010\u0177\011\022\012\u0179\013" +
    "\u017a\014\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\u0197\006\025\010" +
    "\020\011\022\012\024\013\027\014\030\001\001\000\016" +
    "\006\025\010\u0177\011\022\012\u0179\013\u017a\014\030\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public Nodo raiz=null;
	private String id_clase;
	private Clase myself = new Clase();//nuevo
	//public String nombre_clase="n/a";
    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
        +s.value + " no reconocido." );
        System.out.println("Error sintactico:"+s);
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("Error en la Línea " + (s.right+1)+ "Columna "+(s.left+1)+". Identificador " +
        s.value + " no reconocido.");
        System.out.println("Error sintactico:"+s);
    
    }
	
    public Nodo getRaiz(){
        return raiz;
    }
	public String getClassId(){
		return id_clase;
	}
	public Clase getMyself(){
		return myself;
	}
	
	
	/*private void addSimbolo(Nodo raiz, boolean principal){
		if(raiz==null)
			return;
		int no_hijos = raiz.hijos.size();
		int i;
		Nodo hijo=null;
		Simbolo nuevo;
		String tipo = "Object";
		for(i=0;i<no_hijos;i++){
			hijo=raiz.hijos.get(i);
			switch(i){
				case 0:
					tipo=hijo.lexema;
					break;
				default:
					nuevo = new Simbolo();
					nuevo.setTipo(tipo);
					//nuevo.setAmbito(nombre_clase);
					nuevo.setIdentificador(hijo.lexema);
					if(principal){
						lista_simbolos.add(nuevo);
					}else{
						lista_auxiliar.add(nuevo);
					}
			}
		}
	}
		
	public List<Simbolo> getSimbolos(){
		//addClase();
		return lista_simbolos;
	}
	
	private void addClase(String nombre_clase){
		for(Simbolo item:lista_simbolos){
			item.setAmbito(nombre_clase);
		}
	}
*/


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {


    //public Nodo raiz=null;
    //String clase_actual;
	

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= INICIO 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				raiz=v1;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= IMPORTS VISIBILIDAD res_Class tk_Id lKey CUERPO rKey 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v2 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				Nodo padre = new Nodo("Clase","Clase");
				padre.add(new Nodo(v1,"Clase_id"));
				padre.add(v2);
				id_clase=v1;
				myself.setId(v1);//nuevo
				RESULT=padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= VISIBILIDAD res_Class tk_Id lKey CUERPO rKey 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v2 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				Nodo padre = new Nodo("Clase","Clase");
				padre.add(new Nodo(v1,"Clase_id"));
				padre.add(v2);
				id_clase=v1;
				myself.setId(v1);//nuevo
				RESULT=padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= IMPORTS res_Class tk_Id lKey CUERPO rKey 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v2 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				Nodo padre = new Nodo("Clase","Clase");
				padre.add(new Nodo(v1,"Clase_id"));
				padre.add(v2);
				id_clase=v1;
				myself.setId(v1);//nuevo
				RESULT=padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= res_Class tk_Id lKey CUERPO rKey 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v2 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				Nodo padre = new Nodo("Clase","Clase");
				padre.add(new Nodo(v1,"Clase_id"));
				padre.add(v2);
				id_clase=v1;
				myself.setId(v1);//nuevo
				RESULT=padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= IMPORTS VISIBILIDAD res_Class tk_Id lKey rKey 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
				Nodo padre = new Nodo("Clase","Clase");
				padre.add(new Nodo(v1,"Clase_id"));
				id_clase=v1;
				myself.setId(v1);//nuevo
				RESULT=padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= VISIBILIDAD res_Class tk_Id lKey rKey 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
				Nodo padre = new Nodo("Clase","Clase");
				padre.add(new Nodo(v1,"Clase_id"));
				id_clase=v1;
				myself.setId(v1);//nuevo
				RESULT=padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= IMPORTS res_Class tk_Id lKey rKey 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
				Nodo padre = new Nodo("Clase","Clase");
				padre.add(new Nodo(v1,"Clase_id"));
				id_clase=v1;
				myself.setId(v1);//nuevo
				RESULT=padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= res_Class tk_Id lKey rKey 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
				Nodo padre = new Nodo("Clase","Clase");
				padre.add(new Nodo(v1,"Clase_id"));
				id_clase=v1;
				myself.setId(v1);//nuevo
				RESULT=padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CUERPO ::= CUERPO DECLARACION 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v2 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Nodo padre = v1;
				padre.add(v2);
				RESULT = padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUERPO ::= CUERPO METODO 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v2 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Nodo padre = v1;
				padre.add(v2);
				RESULT = padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPO ::= CUERPO CONSTRUCTOR 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v2 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Nodo padre = v1;
				padre.add(v2);
				RESULT = padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO ::= DECLARACION 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Nodo padre = new Nodo("","CUERPO");
				padre.add(v1);
				RESULT=padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPO ::= METODO 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Nodo padre = new Nodo("","CUERPO");
				padre.add(v1);
				RESULT=padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPO ::= CONSTRUCTOR 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Nodo padre = new Nodo("","CUERPO");
				padre.add(v1);
				RESULT=padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IMPORTS ::= IMPORTS res_Import LLAMADA punto por p_coma 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Nodo v2 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
				Nodo padre = v1;
				padre.add(v2);
				padre.add(new Nodo("*","import_all"));
				RESULT = padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMPORTS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IMPORTS ::= IMPORTS res_Import LLAMADA p_coma 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v2 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				Nodo padre = v1;
				padre.add(v2);
				RESULT = padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMPORTS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IMPORTS ::= res_Import LLAMADA punto por p_coma 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
				Nodo padre = new Nodo("IMPORTS","res_Import");
				padre.add(v1);
				padre.add(new Nodo("*","import_all"));
				RESULT = padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMPORTS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IMPORTS ::= res_Import LLAMADA p_coma 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				Nodo padre = new Nodo("IMPORTS","res_Import");
				padre.add(v1);
				RESULT = padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMPORTS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LLAMADA ::= LLAMADA punto tk_Id 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Nodo padre = v1;
				padre.add(new Nodo(v2,"tk_Id"));
				RESULT = padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LLAMADA ::= tk_Id 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new Nodo(v1,"tk_id");
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= ID ASIGNACION p_coma 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
			
				RESULT = v1;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= ID p_coma 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = v1;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ID ::= ID coma tk_Id 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Nodo padre = v1;
				v1.add(new Nodo(v2,"tk_Id"));
				RESULT = padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ID ::= VISIBILIDAD TIPODATO tk_Id 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Nodo padre = new Nodo("","DECLARACION");
				padre.add(v1);
				padre.add(new Nodo(v2,"tk_Id"));
				RESULT = padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ID ::= TIPODATO tk_Id 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Nodo padre = new Nodo("","DECLARACION");
				padre.add(v1);
				padre.add(new Nodo(v2,"tk_Id"));
				RESULT = padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPODATO ::= tipo_Bool 
            {
              Nodo RESULT =null;
		
				RESULT=new Nodo("bool","TIPODATO");
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPODATO ::= tipo_Char 
            {
              Nodo RESULT =null;
		
				RESULT=new Nodo("char","TIPODATO");
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPODATO ::= tipo_Double 
            {
              Nodo RESULT =null;
		
				RESULT=new Nodo("double","TIPODATO");
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPODATO ::= tipo_Int 
            {
              Nodo RESULT =null;
		
				RESULT=new Nodo("int","TIPODATO");
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPODATO ::= tipo_String 
            {
              Nodo RESULT =null;
		
				RESULT=new Nodo("string","TIPODATO");
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPODATO ::= tipo_Void 
            {
              Nodo RESULT =null;
		
				RESULT=new Nodo("void","TIPODATO");
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPODATO ::= tk_Id 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT=new Nodo(v1,"TIPODATO");
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VISIBILIDAD ::= vis_Final 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VISIBILIDAD ::= vis_Private 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VISIBILIDAD ::= vis_Public 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VISIBILIDAD ::= vis_Protected 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ASIGNACION ::= igual CONDICION 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASIGNACION ::= igual res_New tk_Id lParen VALORES rParen 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ASIGNACION ::= igual res_New tk_Id lParen rParen 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E ::= E mas E 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E ::= E menos E 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // E ::= E por E 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // E ::= E dividido E 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // E ::= tk_Numero 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E ::= menos tk_Numero 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E ::= tk_Entero 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E ::= menos tk_Entero 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E ::= lParen CONDICION rParen 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E ::= LLAMADA lParen VALORES rParen 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E ::= LLAMADA lParen rParen 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E ::= LLAMADA 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E ::= tk_Cadena 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E ::= tk_Caracter 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E ::= verdadero 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E ::= falso 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONDICION ::= CONDICION logico_Or CONDICION 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONDICION ::= CONDICION logico_And CONDICION 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONDICION ::= logico_Not CONDICION 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONDICION ::= COMPARACION 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // COMPARACION ::= E relacional_Diferente E 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARACION",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // COMPARACION ::= E relacional_Mayor E 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARACION",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // COMPARACION ::= E relacional_MayorIgual E 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARACION",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // COMPARACION ::= E relacional_Menor E 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARACION",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // COMPARACION ::= E relacional_MenorIgual E 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARACION",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // COMPARACION ::= E igual igual E 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARACION",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // COMPARACION ::= E 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARACION",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IF ::= sentencia_If lParen CONDICION rParen lKey SENTENCIA rKey ELSEIF ELSE 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IF ::= sentencia_If lParen CONDICION rParen lKey SENTENCIA rKey ELSEIF 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IF ::= sentencia_If lParen CONDICION rParen lKey SENTENCIA rKey ELSE 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IF ::= sentencia_If lParen CONDICION rParen lKey SENTENCIA rKey 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IF ::= sentencia_If lParen CONDICION rParen lKey rKey ELSEIF ELSE 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // IF ::= sentencia_If lParen CONDICION rParen lKey rKey ELSEIF 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IF ::= sentencia_If lParen CONDICION rParen lKey rKey ELSE 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IF ::= sentencia_If lParen CONDICION rParen lKey rKey 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ELSEIF ::= ELSEIF sentencia_Else sentencia_If lParen CONDICION rParen lKey SENTENCIA rKey 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSEIF",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ELSEIF ::= ELSEIF sentencia_Else sentencia_If lParen CONDICION rParen lKey rKey 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSEIF",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ELSEIF ::= sentencia_Else sentencia_If lParen CONDICION rParen lKey SENTENCIA rKey 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSEIF",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ELSEIF ::= sentencia_Else sentencia_If lParen CONDICION rParen lKey rKey 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSEIF",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ELSE ::= sentencia_Else lKey SENTENCIA rKey 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ELSE ::= sentencia_Else lKey rKey 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // WHILE ::= sentencia_While lParen CONDICION rParen lKey SENTENCIAW rKey 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // WHILE ::= sentencia_While lParen CONDICION rParen lKey rKey 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FOR ::= sentencia_For lParen tipo_Int tk_Id igual E p_coma CONDICION p_coma PASO rParen lKey SENTENCIA rKey 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FOR ::= sentencia_For lParen tk_Id igual E p_coma CONDICION p_coma PASO rParen lKey SENTENCIA rKey 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FOR ::= sentencia_For lParen tipo_Int tk_Id igual E p_coma CONDICION p_coma PASO rParen lKey rKey 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FOR ::= sentencia_For lParen tk_Id igual E p_coma CONDICION p_coma PASO rParen lKey rKey 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PASO ::= tk_Id mas mas 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PASO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PASO ::= tk_Id menos menos 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PASO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PASO ::= tk_Id igual E 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PASO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PASO ::= tk_Id mas igual E 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PASO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PASO ::= tk_Id menos igual E 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PASO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PASO ::= tk_Id por igual E 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PASO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DO ::= sentencia_Do lKey SENTENCIA rKey sentencia_While lParen CONDICION rParen p_coma 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DO ::= sentencia_Do lKey rKey sentencia_While lParen CONDICION rParen p_coma 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SWITCH ::= sentencia_Switch lParen E rParen lKey CASE DEFAULT rKey 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SWITCH ::= sentencia_Switch lParen E rParen lKey CASE rKey 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CASE ::= CASE sentencia_Case E d_puntos SENTENCIA res_Break p_coma 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CASE ::= CASE sentencia_Case E d_puntos res_Break p_coma 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CASE ::= sentencia_Case E d_puntos SENTENCIA res_Break p_coma 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CASE ::= sentencia_Case E d_puntos res_Break p_coma 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DEFAULT ::= sentencia_Default d_puntos SENTENCIA res_Break p_coma 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DEFAULT ::= sentencia_Default d_puntos res_Break p_coma 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SENTENCIA ::= SENTENCIA IF 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT=v1;	
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT=v1;	
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SENTENCIA ::= SENTENCIA FOR 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT=v1;	
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SENTENCIA ::= SENTENCIA DO 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT=v1;	
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT=v1;	
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v2 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Nodo padre = v1;
				if(padre==null){
					padre=new Nodo("","SENTENCIA");
				}
				padre.add(v2);
				RESULT=padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SENTENCIA ::= SENTENCIA LLAMADA lParen VALORES rParen p_coma 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
				RESULT=v1;	
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SENTENCIA ::= SENTENCIA LLAMADA lParen rParen p_coma 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
				RESULT=v1;	
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SENTENCIA ::= SENTENCIA LLAMADA p_coma 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
				RESULT=v1;	
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SENTENCIA ::= SENTENCIA LLAMADA ASIGNACION p_coma 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
				RESULT=v1;	
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SENTENCIA ::= SENTENCIA res_Return CONDICION p_coma 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
				RESULT=v1;	
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SENTENCIA ::= SENTENCIA res_Return p_coma 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
				RESULT=v1;	
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SENTENCIA ::= IF 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SENTENCIA ::= WHILE 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SENTENCIA ::= FOR 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SENTENCIA ::= DO 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SENTENCIA ::= SWITCH 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SENTENCIA ::= DECLARACION 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Nodo padre = new Nodo("","SENTENCIA");
				padre.add(v1);
				RESULT=padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SENTENCIA ::= LLAMADA lParen VALORES rParen p_coma 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SENTENCIA ::= LLAMADA lParen rParen p_coma 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SENTENCIA ::= LLAMADA p_coma 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SENTENCIA ::= LLAMADA ASIGNACION p_coma 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SENTENCIA ::= res_Return p_coma 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SENTENCIA ::= res_Return CONDICION p_coma 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SENTENCIAW ::= SENTENCIAW IF 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT=v1;	
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAW",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SENTENCIAW ::= SENTENCIAW WHILE 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT=v1;	
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAW",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // SENTENCIAW ::= SENTENCIAW FOR 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT=v1;	
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAW",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // SENTENCIAW ::= SENTENCIAW DO 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT=v1;	
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAW",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SENTENCIAW ::= SENTENCIAW SWITCH 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT=v1;	
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAW",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SENTENCIAW ::= SENTENCIAW DECLARACION 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v2 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Nodo padre = v1;
				if(padre!=null){
					padre=new Nodo("","SENTENCIA");
				}
				padre.add(v2);
				RESULT=padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAW",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // SENTENCIAW ::= SENTENCIAW LLAMADA lParen VALORES rParen p_coma 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
				RESULT=v1;	
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAW",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // SENTENCIAW ::= SENTENCIAW LLAMADA lParen rParen p_coma 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
				RESULT=v1;	
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAW",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SENTENCIAW ::= SENTENCIAW LLAMADA p_coma 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
				RESULT=v1;	
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAW",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SENTENCIAW ::= SENTENCIAW LLAMADA ASIGNACION p_coma 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
				RESULT=v1;	
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAW",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SENTENCIAW ::= SENTENCIAW res_Return CONDICION p_coma 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
				RESULT=v1;	
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAW",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SENTENCIAW ::= SENTENCIAW res_Return p_coma 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
				RESULT=v1;	
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAW",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SENTENCIAW ::= SENTENCIAW res_Break p_coma 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
				RESULT=v1;	
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAW",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SENTENCIAW ::= IF 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAW",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SENTENCIAW ::= WHILE 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAW",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SENTENCIAW ::= FOR 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAW",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // SENTENCIAW ::= DO 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAW",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SENTENCIAW ::= SWITCH 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAW",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // SENTENCIAW ::= DECLARACION 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Nodo padre = new Nodo("","SENTENCIA");
				padre.add(v1);
				RESULT=padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAW",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // SENTENCIAW ::= LLAMADA lParen VALORES rParen p_coma 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAW",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // SENTENCIAW ::= LLAMADA lParen rParen p_coma 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAW",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // SENTENCIAW ::= LLAMADA p_coma 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAW",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // SENTENCIAW ::= LLAMADA ASIGNACION p_coma 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAW",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // SENTENCIAW ::= res_Break p_coma 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAW",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // SENTENCIAW ::= res_Return p_coma 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAW",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // SENTENCIAW ::= res_Return CONDICION p_coma 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAW",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // VALORES ::= VALORES coma CONDICION 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v2 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Nodo padre = v1;
				padre.add(v2);
				RESULT=padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALORES",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // VALORES ::= CONDICION 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Nodo padre = new Nodo("","VALORES");
				padre.add(v1);
				RESULT=padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALORES",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // METODO ::= VISIBILIDAD TIPODATO tk_Id lParen PARAMETRO rParen lKey SENTENCIA rKey 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Nodo v3 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v4 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Nodo padre = new Nodo("","METODO");
				padre.add(v1);
				padre.add(new Nodo(Integer.toString((Integer.parseInt(l2)-Integer.parseInt(l1))),""));
				padre.add(new Nodo(v2,"Funcion_id"));
				padre.add(v3);
				padre.add(v4);
				myself.add(v2);
				RESULT = padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // METODO ::= VISIBILIDAD TIPODATO tk_Id lParen PARAMETRO rParen lKey rKey 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Nodo v3 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Nodo padre = new Nodo("","METODO");
				padre.add(v1);
				padre.add(new Nodo(Integer.toString((Integer.parseInt(l2)-Integer.parseInt(l1))),""));
				padre.add(new Nodo(v2,"Funcion_id"));
				padre.add(v3);
				myself.add(v2);
				RESULT = padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // METODO ::= VISIBILIDAD TIPODATO tk_Id lParen rParen lKey SENTENCIA rKey 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v3 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Nodo padre = new Nodo("","METODO");
				padre.add(v1);
				padre.add(new Nodo(Integer.toString((Integer.parseInt(l2)-Integer.parseInt(l1))),""));
				padre.add(new Nodo(v2,"Funcion_id"));
				padre.add(v3);
				myself.add(v2);
				RESULT = padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // METODO ::= VISIBILIDAD TIPODATO tk_Id lParen rParen lKey rKey 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Nodo padre = new Nodo("","METODO");
				padre.add(v1);
				padre.add(new Nodo(Integer.toString((Integer.parseInt(l2)-Integer.parseInt(l1))),""));
				padre.add(new Nodo(v2,"Funcion_id"));
				myself.add(v2);
				RESULT = padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // METODO ::= TIPODATO tk_Id lParen PARAMETRO rParen lKey SENTENCIA rKey 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Nodo v3 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v4 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Nodo padre = new Nodo("","METODO");
				padre.add(v1);
				padre.add(new Nodo(Integer.toString((Integer.parseInt(l2)-Integer.parseInt(l1))),""));
				padre.add(new Nodo(v2,"Funcion_id"));
				padre.add(v3);
				padre.add(v4);
				myself.add(v2);
				RESULT = padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // METODO ::= TIPODATO tk_Id lParen PARAMETRO rParen lKey rKey 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Nodo v3 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Nodo padre = new Nodo("","METODO");
				padre.add(v1);
				padre.add(new Nodo(Integer.toString((Integer.parseInt(l2)-Integer.parseInt(l1))),""));
				padre.add(new Nodo(v2,"Funcion_id"));
				padre.add(v3);
				myself.add(v2);
				RESULT = padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // METODO ::= TIPODATO tk_Id lParen rParen lKey SENTENCIA rKey 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v3 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Nodo padre = new Nodo("","METODO");
				padre.add(v1);
				padre.add(new Nodo(Integer.toString((Integer.parseInt(l2)-Integer.parseInt(l1))),""));
				padre.add(new Nodo(v2,"Funcion_id"));
				padre.add(v3);
				myself.add(v2);
				RESULT = padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // METODO ::= TIPODATO tk_Id lParen rParen lKey rKey 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Nodo padre = new Nodo("","METODO");
				padre.add(v1);
				padre.add(new Nodo(Integer.toString((Integer.parseInt(l2)-Integer.parseInt(l1))),""));
				padre.add(new Nodo(v2,"Funcion_id"));
				myself.add(v2);
				RESULT = padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // CONSTRUCTOR ::= VISIBILIDAD tk_Id lParen PARAMETRO rParen lKey SENTENCIA rKey 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Nodo v2 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
				Nodo padre = new Nodo("","CONSTRUCTOR");
				padre.add(new Nodo(v1,"tk_Id"));
				padre.add(v2);
				RESULT = padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // CONSTRUCTOR ::= VISIBILIDAD tk_Id lParen PARAMETRO rParen lKey rKey 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Nodo v2 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
				Nodo padre = new Nodo("","CONSTRUCTOR");
				padre.add(new Nodo(v1,"tk_Id"));
				padre.add(v2);
				RESULT = padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // CONSTRUCTOR ::= VISIBILIDAD tk_Id lParen rParen lKey SENTENCIA rKey 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
				Nodo padre = new Nodo("","CONSTRUCTOR");
				padre.add(new Nodo(v1,"tk_Id"));
				RESULT = padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // CONSTRUCTOR ::= VISIBILIDAD tk_Id lParen rParen lKey rKey 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
				Nodo padre = new Nodo("","CONSTRUCTOR");
				padre.add(new Nodo(v1,"tk_Id"));
				RESULT = padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // CONSTRUCTOR ::= tk_Id lParen PARAMETRO rParen lKey SENTENCIA rKey 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Nodo v2 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
				Nodo padre = new Nodo("","CONSTRUCTOR");
				padre.add(new Nodo(v1,"tk_Id"));
				padre.add(v2);
				RESULT = padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // CONSTRUCTOR ::= tk_Id lParen PARAMETRO rParen lKey rKey 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Nodo v2 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
				Nodo padre = new Nodo("","CONSTRUCTOR");
				padre.add(new Nodo(v1,"tk_Id"));
				padre.add(v2);
				RESULT = padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // CONSTRUCTOR ::= tk_Id lParen rParen lKey SENTENCIA rKey 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
				Nodo padre = new Nodo("","CONSTRUCTOR");
				padre.add(new Nodo(v1,"tk_Id"));
				RESULT = padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // CONSTRUCTOR ::= tk_Id lParen rParen lKey rKey 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
				Nodo padre = new Nodo("","CONSTRUCTOR");
				padre.add(new Nodo(v1,"tk_Id"));
				RESULT = padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // PARAMETRO ::= PARAMETRO coma TIPODATO tk_Id 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v2 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Nodo padre = v1;
				padre.add(v2);
				padre.add(new Nodo(v3,"tk_Id"));
				RESULT=padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // PARAMETRO ::= TIPODATO tk_Id 
            {
              Nodo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Nodo padre = new Nodo("","PARAMETRO");
				padre.add(v1);
				padre.add(new Nodo(v2,"tk_Id"));
				RESULT=padre;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import Analisis.*;
import Result.*;//nuevo
import java.awt.Component;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;



/**
 *
 * @author LUIS QUIÑONEZ
 */
public class VentanaCliente extends javax.swing.JFrame implements ActionListener,MouseListener,CaretListener,DocumentListener{

    /**
     * Creates new form VentanaCliente
     */
    public VentanaCliente() {
        initComponents();
        setActionListeners();
        blankTree();//para que no tenga nada al principio el arbol
    }

    private void setActionListeners(){
        //Menus
        this.mitem_analizar_cpr.addActionListener(this);
        this.mitem_abrir.addActionListener(this);
        this.mitem_guardar.addActionListener(this);
        this.mitem_eliminar.addActionListener(this);
        //Tab panel
        this.tab_pane.addMouseListener(this);
        //java.awt.event.InputMethodEvent
        //javax.swing.event.CaretEvent 
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tab_pane = new javax.swing.JTabbedPane();
        label_fondo = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        text_log = new javax.swing.JTextArea();
        label_status = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tree_json = new javax.swing.JTree();
        jMenuBar1 = new javax.swing.JMenuBar();
        menu_archivo = new javax.swing.JMenu();
        mitem_abrir = new javax.swing.JMenuItem();
        mitem_guardar = new javax.swing.JMenuItem();
        mitem_eliminar = new javax.swing.JMenuItem();
        menu_analizar = new javax.swing.JMenu();
        mitem_analizar_cpr = new javax.swing.JMenuItem();
        mitem_analizar_proyecto = new javax.swing.JMenuItem();
        menu_reportes = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        label_fondo.setBackground(new java.awt.Color(204, 204, 204));
        label_fondo.setEnabled(false);
        label_fondo.setFocusable(false);
        label_fondo.setOpaque(true);
        tab_pane.addTab("+", label_fondo);

        text_log.setColumns(20);
        text_log.setRows(5);
        jScrollPane2.setViewportView(text_log);

        tree_json.setSelectionModel(null);
        jScrollPane1.setViewportView(tree_json);

        jMenuBar1.setFocusable(false);

        menu_archivo.setText("Archivo");

        mitem_abrir.setText("Abrir");
        menu_archivo.add(mitem_abrir);

        mitem_guardar.setText("Guardar");
        menu_archivo.add(mitem_guardar);

        mitem_eliminar.setText("Eliminar");
        menu_archivo.add(mitem_eliminar);

        jMenuBar1.add(menu_archivo);

        menu_analizar.setText("Analizar ");

        mitem_analizar_cpr.setText("CPR Actual");
        menu_analizar.add(mitem_analizar_cpr);

        mitem_analizar_proyecto.setText("Proyecto");
        menu_analizar.add(mitem_analizar_proyecto);

        jMenuBar1.add(menu_analizar);

        menu_reportes.setText("Reportes");
        jMenuBar1.add(menu_reportes);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addComponent(label_status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tab_pane, javax.swing.GroupLayout.DEFAULT_SIZE, 764, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tab_pane, javax.swing.GroupLayout.DEFAULT_SIZE, 553, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(label_status))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    public static void callVentana() {//modificado para llamarlo desde un main
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaCliente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel label_fondo;
    private javax.swing.JLabel label_status;
    private javax.swing.JMenu menu_analizar;
    private javax.swing.JMenu menu_archivo;
    private javax.swing.JMenu menu_reportes;
    private javax.swing.JMenuItem mitem_abrir;
    private javax.swing.JMenuItem mitem_analizar_cpr;
    private javax.swing.JMenuItem mitem_analizar_proyecto;
    private javax.swing.JMenuItem mitem_eliminar;
    private javax.swing.JMenuItem mitem_guardar;
    private javax.swing.JTabbedPane tab_pane;
    private javax.swing.JTextArea text_log;
    private javax.swing.JTree tree_json;
    // End of variables declaration//GEN-END:variables

    //<editor-fold defaultstate="collapsed" desc="Codigo dentro Eventos">
    //Tab Pane
    private void crearCPR(){//basicamente es agregar una nueva pestaña
        int pestanya = this.tab_pane.getSelectedIndex();
        int limite = this.tab_pane.getTabCount()-1;
        if(pestanya==limite){
            agregarPestanya("Nuevo",limite,null);
            this.tab_pane.setSelectedIndex(limite);//para que siempre haya una pestaña con textarea elegida
        }        
    }
    
    private void posicionCursor(){
        javax.swing.JTextArea text_actual = currentTextArea();
        int pos_cursor = text_actual.getCaretPosition();
        int fila=0;
        int columna=0;
        try{
            fila=text_actual.getLineOfOffset(pos_cursor);
            columna=pos_cursor-text_actual.getLineStartOffset(fila);
            fila++;//para que no empieze desde cero
        }catch(Exception e){
            //en teoria no deberia ocurrir
        }
        addStatusMsj(fila,columna);
    }
    
    private void actualizarNumeroLineas(){
        LineCount aux = getCurrentLineCount();
        if(aux==null)
            return;
        aux.actualizar();
    }
    //Menus
    private void analizarTexto(){
        String texto=getTextAreaText();
        if(texto.isEmpty()||texto==null){
            addLogMsj("Lo sentimos, no es valido analizar un documento vacio");
            return;
        }
        Resultado result = Analisis.analizarJson(texto);
        setTree(result);
        /*        String resultado = Analisis.analizar(texto);
        if(resultado==null){//el analisis fue exitoso
        addLogMsj("Analisis exitoso");
        }else{
        addLogMsj(resultado);
        }*/
    }
    private void abrirCPR(){
        int pos=this.tab_pane.getTabCount()-1;
        String ruta = Archivo.abrir();//recupero la ruta del archivo
        String[] ruta_separada = ruta.split("\\\\");
        String titulo = ruta_separada[ruta_separada.length-1];//para poner en la pestaña solo el titulo del documento, y no la ruta completa
        agregarPestanya(titulo,pos,ruta);//agrego una nueva pestaña con el titulo
        this.tab_pane.setSelectedIndex(pos);//seleccionamos la nueva pestaña
        setTextAreaText(Archivo.leer(ruta));//agregamos texto a su textarea        
    }
    private void guardarCPR(){
        int index = this.tab_pane.getSelectedIndex();//recupero el index actual
        String ruta = this.tab_pane.getToolTipTextAt(index);//recupero la ruta que guarde como ToolTipText, en caso de que no haya es porque el archivo es nuevo
        if(ruta!=null&&!ruta.isEmpty()){//si la ruta no es null
            Archivo.escribir(ruta, getTextAreaText());
        }else{//Si no existe la ruta, entonces usamos un JFileChooser como en abrir
            setTabTip(Archivo.guardar(getTextAreaText()));//guardo, cambio el titulo y el tooltip de la pestanya
        }
        popUpMessage("Archivo guardado");
    }
    private void eliminarCPR(){
        if(Archivo.eliminar()){
            popUpMessage("Archivo eliminado");
        }else{
            popUpMessage("Lo sentimos, no se pudo eliminar el archivo");
        }
    }
    //</editor-fold>
    
    
    //<editor-fold defaultstate="collapsed" desc="Codigo Auxiliar">
    private void agregarPestanya(String titulo, int posicion, String tip){//agregar una nueva pestaña en la posicion deseada
        javax.swing.JScrollPane aux = new javax.swing.JScrollPane();
        javax.swing.JTextArea aux_area = new javax.swing.JTextArea();
        aux_area.addCaretListener(this);
        aux_area.getDocument().addDocumentListener(this);//nuevo
        aux.setViewportView(aux_area);
        aux.setRowHeaderView(new LineCount(new LineaImp(aux_area)));//nuevo
        aux.setFocusable(false);
        this.tab_pane.insertTab(titulo, null, aux, tip, posicion);
    }
    private void setTextAreaText(String texto){//buscar el textArea actual y agregarle texto
        javax.swing.JTextArea aux_text = currentTextArea();//(javax.swing.JTextArea)aux_view.getComponent(0);//recuperamos el text area del view port actual
        aux_text.setText(texto);
    }
    private String getTextAreaText(){//recuperar el texto del textArea actual
        javax.swing.JTextArea aux_text = currentTextArea();//(javax.swing.JTextArea)aux_view.getComponent(0);//recuperamos el text area del view port actual
        return aux_text.getText();
    }
    private javax.swing.JTextArea currentTextArea(){
        javax.swing.JScrollPane aux =(javax.swing.JScrollPane)this.tab_pane.getSelectedComponent();//recuperamos el jscrollpane actual
        javax.swing.JViewport aux_view = (javax.swing.JViewport)aux.getComponent(0);//recuperamos el view port del jscrollpane actual
        javax.swing.JTextArea aux_text = (javax.swing.JTextArea)aux_view.getComponent(0);//recuperamos el text area del view port actual
        return aux_text;
    }
    private LineCount getCurrentLineCount(){
        javax.swing.JScrollPane aux = (javax.swing.JScrollPane)this.tab_pane.getSelectedComponent();//recupero el scroll
        LineCount aux_line = (LineCount)aux.getRowHeader().getComponent(0);
        return aux_line;
    }
    private void popUpMessage(String mensaje){
        javax.swing.JOptionPane.showMessageDialog(null, mensaje, "Informacion", javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }
    private void setTabTip(String tip){
        String[] ruta_separada = tip.split("\\\\");
        if(ruta_separada==null){//por algun error raro
            return;
        }
        String titulo=ruta_separada[ruta_separada.length-1];
        int index = this.tab_pane.getSelectedIndex();
        this.tab_pane.setTitleAt(index, titulo);
        this.tab_pane.setToolTipTextAt(index, tip);
    }
    private void addLogMsj(String mensaje){
        String mensaje_previo=this.text_log.getText();
        this.text_log.setText(mensaje_previo+mensaje+"\n");
    }
    private void addStatusMsj(int fila, int columna){
        this.label_status.setText("Fila:"+fila+" Columna:"+columna);
    }
    private void setTree(Resultado RESULT){//En base a un result agrega lo necesario al jtree
        DefaultMutableTreeNode json = new DefaultMutableTreeNode("JSON");
        DefaultTreeModel modelo = new DefaultTreeModel(json);
        int limite;
        //score
        DefaultMutableTreeNode score = new DefaultMutableTreeNode("Score");
        modelo.insertNodeInto(score, json, 0);
        modelo.insertNodeInto(newNode(Double.toString(RESULT.Score())), score, 0);
        //Variables
        DefaultMutableTreeNode variables = new DefaultMutableTreeNode("Variables");
        modelo.insertNodeInto(variables, json, 1);
        limite = Integer.parseInt(RESULT.variables(Resultado.Peticion.CANTIDAD));//las listas las puse privadas y para no cambiarlo voy a usar un ciclo for
        for(int i=0;i<limite;i++){
            modelo.insertNodeInto(newNode(RESULT.variables(i,Resultado.Peticion.NOMBRE)), variables, i);
        }
        //Metodos
        DefaultMutableTreeNode metodos = new DefaultMutableTreeNode("Metodos");
        modelo.insertNodeInto(metodos, json, 2);
        limite = Integer.parseInt(RESULT.metodos(Resultado.Peticion.CANTIDAD));//las listas las puse privadas y para no cambiarlo voy a usar un ciclo for
        for(int i=0;i<limite;i++){
            modelo.insertNodeInto(newNode(RESULT.metodos(i,Resultado.Peticion.NOMBRE)), metodos, i);
        }
        //Clases
        DefaultMutableTreeNode clases = new DefaultMutableTreeNode("Clases");
        modelo.insertNodeInto(clases, json, 3);
        limite = Integer.parseInt(RESULT.clases(Resultado.Peticion.CANTIDAD));//las listas las puse privadas y para no cambiarlo voy a usar un ciclo for
        for(int i=0;i<limite;i++){
            modelo.insertNodeInto(newNode(RESULT.clases(i,Resultado.Peticion.NOMBRE)), clases, i);
        }
        //jtree
        this.tree_json.setModel(modelo);
        
        
    }
    private DefaultMutableTreeNode newNode(String name){
        return new DefaultMutableTreeNode(name);
    }
    private void blankTree(){
        this.tree_json.setModel(null);
    }
    //</editor-fold>
       
    
    // <editor-fold defaultstate="collapsed" desc="Override de Eventos"> 
    @Override
    public void actionPerformed(ActionEvent e) {//eventos de menus
        if(e.getSource()==this.mitem_analizar_cpr){
            analizarTexto();
        }else if(e.getSource()==this.mitem_abrir){
            abrirCPR();
        }else if(e.getSource()==this.mitem_guardar){
            guardarCPR();
        }else if(e.getSource()==this.mitem_eliminar){
            eliminarCPR();
        }
        
    }
    
    @Override
    public void mouseClicked(MouseEvent e) {//eventos del tab panel, solo se usa clicked
        if(e.getSource()==this.tab_pane){
            crearCPR();
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {//innecesario
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseReleased(MouseEvent e) {//innecesario
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseEntered(MouseEvent e) {//innecesario
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseExited(MouseEvent e) {//innecesario
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
   @Override
    public void caretUpdate(CaretEvent e) {
        posicionCursor();
    }

    //Evento para lineas en el textarea
    @Override
    public void insertUpdate(DocumentEvent e) {
        actualizarNumeroLineas();
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        actualizarNumeroLineas();
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        actualizarNumeroLineas();
    }
    //Termina codigo autogenerado para eventos
    //</editor-fold>





}

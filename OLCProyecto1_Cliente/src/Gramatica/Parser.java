
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Gramatica;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\002\004\000\002\002\003\000\002\003" +
    "\006\000\002\003\005\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\006\006\000\002\006\005\000\002" +
    "\010\004\000\002\010\004\000\002\010\003\000\002\010" +
    "\003\000\002\011\006\000\002\011\005\000\002\012\004" +
    "\000\002\012\004\000\002\012\003\000\002\012\003\000" +
    "\002\007\006\000\002\007\005\000\002\004\007\000\002" +
    "\004\007\000\002\004\007\000\002\004\007\000\002\004" +
    "\003\000\002\013\006\000\002\014\007\000\002\014\006" +
    "\000\002\014\006\000\002\014\005\000\002\015\007\000" +
    "\002\015\006\000\002\015\005\000\002\016\007\000\002" +
    "\016\006\000\002\016\006\000\002\016\005\000\002\017" +
    "\006\000\002\017\005\000\002\020\006\000\002\020\005" +
    "\000\002\021\006\000\002\021\004\000\002\022\004\000" +
    "\002\022\004\000\002\022\004\000\002\022\004\000\002" +
    "\022\004\000\002\022\004\000\002\022\004\000\002\022" +
    "\004\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\023\005\000\002" +
    "\024\004\000\002\024\004\000\002\024\004\000\002\024" +
    "\004\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\025\004\000\002\026\005\000" +
    "\002\026\006\000\002\026\004\000\002\026\005\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\030\004\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\003\000\002\031\004\000\002" +
    "\031\003\000\002\031\004\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\032\005\000\002\032\005\000" +
    "\002\033\012\000\002\033\007\000\002\033\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\004\000\002\035" +
    "\005\000\002\035\003\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\006\000\002\034\003\000\002\036\005\000\002" +
    "\036\006\000\002\036\006\000\002\036\006\000\002\037" +
    "\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\004\004\005\001\002\000\004\002\345\001" +
    "\002\000\014\034\007\035\010\036\012\037\011\054\013" +
    "\001\002\000\004\002\000\001\002\000\004\062\341\001" +
    "\002\000\004\062\335\001\002\000\004\062\331\001\002" +
    "\000\004\062\325\001\002\000\056\005\uffe5\006\uffe5\007" +
    "\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5" +
    "\016\uffe5\017\uffe5\020\uffe5\021\uffe5\023\uffe5\025\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\032\uffe5\033\uffe5\041\uffe5\102\uffe5" +
    "\001\002\000\012\005\021\006\016\017\022\041\017\001" +
    "\002\000\012\005\ufff8\006\ufff8\017\ufff8\041\ufff8\001\002" +
    "\000\014\034\007\035\010\036\012\037\011\054\013\001" +
    "\002\000\020\040\056\043\062\044\057\045\060\046\054" +
    "\047\065\102\066\001\002\000\012\005\ufff9\006\ufff9\017" +
    "\ufff9\041\ufff9\001\002\000\014\034\007\035\010\036\012" +
    "\037\011\054\013\001\002\000\004\002\ufffe\001\002\000" +
    "\012\005\ufffa\006\ufffa\017\ufffa\041\ufffa\001\002\000\012" +
    "\005\021\006\016\017\027\041\017\001\002\000\012\005" +
    "\ufffb\006\ufffb\017\ufffb\041\ufffb\001\002\000\012\005\ufffc" +
    "\006\ufffc\017\ufffc\041\ufffc\001\002\000\004\002\uffff\001" +
    "\002\000\012\005\ufffd\006\ufffd\017\ufffd\041\ufffd\001\002" +
    "\000\010\010\036\020\035\041\017\001\002\000\010\010" +
    "\ufff2\020\ufff2\041\ufff2\001\002\000\010\010\ufff3\020\ufff3" +
    "\041\ufff3\001\002\000\010\010\036\020\051\041\017\001" +
    "\002\000\012\005\ufff6\006\ufff6\017\ufff6\041\ufff6\001\002" +
    "\000\014\034\007\035\010\036\012\037\011\054\013\001" +
    "\002\000\010\023\041\041\017\102\043\001\002\000\010" +
    "\023\uffed\041\uffed\102\uffed\001\002\000\010\010\ufff0\020" +
    "\ufff0\041\ufff0\001\002\000\010\023\045\041\017\102\046" +
    "\001\002\000\010\023\uffec\041\uffec\102\uffec\001\002\000" +
    "\010\023\uffef\041\uffef\102\uffef\001\002\000\010\010\ufff1" +
    "\020\ufff1\041\ufff1\001\002\000\010\023\uffee\041\uffee\102" +
    "\uffee\001\002\000\010\010\ufff5\020\ufff5\041\ufff5\001\002" +
    "\000\010\010\ufff4\020\ufff4\041\ufff4\001\002\000\012\005" +
    "\ufff7\006\ufff7\017\ufff7\041\ufff7\001\002\000\022\040\uffba" +
    "\041\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba\102" +
    "\uffba\001\002\000\022\040\uffbd\041\uffbd\043\uffbd\044\uffbd" +
    "\045\uffbd\046\uffbd\047\uffbd\102\uffbd\001\002\000\004\102" +
    "\uffb3\001\002\000\022\040\056\041\215\043\062\044\057" +
    "\045\060\046\054\047\065\102\066\001\002\000\004\070" +
    "\207\001\002\000\004\102\uffb0\001\002\000\004\102\uffb4" +
    "\001\002\000\006\072\203\073\204\001\002\000\004\102" +
    "\uffb1\001\002\000\022\040\uffbb\041\uffbb\043\uffbb\044\uffbb" +
    "\045\uffbb\046\uffbb\047\uffbb\102\uffbb\001\002\000\022\040" +
    "\uffbc\041\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc" +
    "\102\uffbc\001\002\000\004\102\uffb2\001\002\000\012\062" +
    "\171\063\172\064\173\066\170\001\002\000\004\102\070" +
    "\001\002\000\010\062\072\072\uffb6\073\uffb6\001\002\000" +
    "\006\072\uffb5\073\uffb5\001\002\000\030\042\105\057\076" +
    "\060\102\061\104\064\103\070\106\077\075\100\077\101" +
    "\111\102\107\103\100\001\002\000\062\040\uffa1\041\uffa1" +
    "\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051" +
    "\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\062\uffa1" +
    "\063\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1\071\uffa1\072" +
    "\uffa1\073\uffa1\102\uffa1\001\002\000\034\040\uff96\041\uff96" +
    "\043\uff96\044\uff96\045\uff96\046\uff96\047\uff96\055\uff96\056" +
    "\uff96\071\uff96\072\uff96\073\uff96\102\uff96\001\002\000\062" +
    "\040\uffa4\041\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047" +
    "\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4" +
    "\056\uffa4\062\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\067" +
    "\uffa4\071\uffa4\072\uffa4\073\uffa4\102\uffa4\001\002\000\030" +
    "\042\105\057\076\060\102\061\104\064\103\070\106\077" +
    "\075\100\077\101\111\102\107\103\100\001\002\000\062" +
    "\040\uffa9\041\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047" +
    "\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9" +
    "\056\uffa9\062\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9\067" +
    "\uffa9\071\uffa9\072\uffa9\073\uffa9\102\uffa9\001\002\000\062" +
    "\040\uffa7\041\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047" +
    "\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7" +
    "\056\uffa7\062\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7\067" +
    "\uffa7\071\uffa7\072\uffa7\073\uffa7\102\uffa7\001\002\000\062" +
    "\040\uffa0\041\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047" +
    "\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0" +
    "\056\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0\067" +
    "\uffa0\071\uffa0\072\uffa0\073\uffa0\102\uffa0\001\002\000\062" +
    "\040\uffa3\041\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047" +
    "\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3" +
    "\056\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3\067" +
    "\uffa3\071\uffa3\072\uffa3\073\uffa3\102\uffa3\001\002\000\006" +
    "\100\165\103\166\001\002\000\062\040\uffa2\041\uffa2\043" +
    "\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2" +
    "\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\062\uffa2\063" +
    "\uffa2\064\uffa2\065\uffa2\066\uffa2\067\uffa2\071\uffa2\072\uffa2" +
    "\073\uffa2\102\uffa2\001\002\000\004\076\154\001\002\000" +
    "\030\042\105\057\076\060\102\061\104\064\103\070\106" +
    "\077\075\100\077\101\111\102\107\103\100\001\002\000" +
    "\006\063\146\064\147\001\002\000\062\040\uff8f\041\uff8f" +
    "\043\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f\050\121\051" +
    "\123\052\126\053\125\054\117\055\uff8f\056\uff8f\062\131" +
    "\063\130\064\122\065\120\066\127\067\124\071\uff8f\072" +
    "\uff8f\073\uff8f\102\uff8f\001\002\000\062\040\uffa5\041\uffa5" +
    "\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051" +
    "\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\062\uffa5" +
    "\063\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5\071\uffa5\072" +
    "\uffa5\073\uffa5\102\uffa5\001\002\000\012\055\113\056\114" +
    "\072\uffaf\073\uffaf\001\002\000\030\042\105\057\076\060" +
    "\102\061\104\064\103\070\106\077\075\100\077\101\111" +
    "\102\107\103\100\001\002\000\030\042\105\057\076\060" +
    "\102\061\104\064\103\070\106\077\075\100\077\101\111" +
    "\102\107\103\100\001\002\000\034\040\uff9a\041\uff9a\043" +
    "\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\055\113\056\uff9a" +
    "\071\uff9a\072\uff9a\073\uff9a\102\uff9a\001\002\000\034\040" +
    "\uff99\041\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99" +
    "\055\uff99\056\uff99\071\uff99\072\uff99\073\uff99\102\uff99\001" +
    "\002\000\024\042\105\060\102\061\104\064\103\077\075" +
    "\100\077\101\111\102\107\103\100\001\002\000\024\042" +
    "\105\060\102\061\104\064\103\077\075\100\077\101\111" +
    "\102\107\103\100\001\002\000\024\042\105\060\102\061" +
    "\104\064\103\077\075\100\077\101\111\102\107\103\100" +
    "\001\002\000\024\042\105\060\102\061\104\064\103\077" +
    "\075\100\077\101\111\102\107\103\100\001\002\000\024" +
    "\042\105\060\102\061\104\064\103\077\075\100\077\101" +
    "\111\102\107\103\100\001\002\000\024\042\105\060\102" +
    "\061\104\064\103\077\075\100\077\101\111\102\107\103" +
    "\100\001\002\000\024\042\105\060\102\061\104\064\103" +
    "\077\075\100\077\101\111\102\107\103\100\001\002\000" +
    "\024\042\105\060\102\061\104\064\103\077\075\100\077" +
    "\101\111\102\107\103\100\001\002\000\024\042\105\060" +
    "\102\061\104\064\103\077\075\100\077\101\111\102\107" +
    "\103\100\001\002\000\024\042\105\060\102\061\104\064" +
    "\103\077\075\100\077\101\111\102\107\103\100\001\002" +
    "\000\004\062\132\001\002\000\024\042\105\060\102\061" +
    "\104\064\103\077\075\100\077\101\111\102\107\103\100" +
    "\001\002\000\046\040\uff90\041\uff90\043\uff90\044\uff90\045" +
    "\uff90\046\uff90\047\uff90\055\uff90\056\uff90\063\130\064\122" +
    "\065\120\066\127\067\124\071\uff90\072\uff90\073\uff90\102" +
    "\uff90\001\002\000\062\040\uffae\041\uffae\043\uffae\044\uffae" +
    "\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053" +
    "\uffae\054\uffae\055\uffae\056\uffae\062\uffae\063\uffae\064\uffae" +
    "\065\120\066\127\067\124\071\uffae\072\uffae\073\uffae\102" +
    "\uffae\001\002\000\062\040\uffac\041\uffac\043\uffac\044\uffac" +
    "\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac\053" +
    "\uffac\054\uffac\055\uffac\056\uffac\062\uffac\063\uffac\064\uffac" +
    "\065\uffac\066\uffac\067\uffac\071\uffac\072\uffac\073\uffac\102" +
    "\uffac\001\002\000\046\040\uff93\041\uff93\043\uff93\044\uff93" +
    "\045\uff93\046\uff93\047\uff93\055\uff93\056\uff93\063\130\064" +
    "\122\065\120\066\127\067\124\071\uff93\072\uff93\073\uff93" +
    "\102\uff93\001\002\000\046\040\uff92\041\uff92\043\uff92\044" +
    "\uff92\045\uff92\046\uff92\047\uff92\055\uff92\056\uff92\063\130" +
    "\064\122\065\120\066\127\067\124\071\uff92\072\uff92\073" +
    "\uff92\102\uff92\001\002\000\062\040\uffaa\041\uffaa\043\uffaa" +
    "\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052" +
    "\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\062\uffaa\063\uffaa" +
    "\064\uffaa\065\uffaa\066\uffaa\067\uffaa\071\uffaa\072\uffaa\073" +
    "\uffaa\102\uffaa\001\002\000\046\040\uff91\041\uff91\043\uff91" +
    "\044\uff91\045\uff91\046\uff91\047\uff91\055\uff91\056\uff91\063" +
    "\130\064\122\065\120\066\127\067\124\071\uff91\072\uff91" +
    "\073\uff91\102\uff91\001\002\000\062\040\uffad\041\uffad\043" +
    "\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad" +
    "\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad\062\uffad\063" +
    "\uffad\064\uffad\065\120\066\127\067\124\071\uffad\072\uffad" +
    "\073\uffad\102\uffad\001\002\000\046\040\uff95\041\uff95\043" +
    "\uff95\044\uff95\045\uff95\046\uff95\047\uff95\055\uff95\056\uff95" +
    "\063\130\064\122\065\120\066\127\067\124\071\uff95\072" +
    "\uff95\073\uff95\102\uff95\001\002\000\062\040\uffab\041\uffab" +
    "\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051" +
    "\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056\uffab\062\uffab" +
    "\063\uffab\064\uffab\065\uffab\066\uffab\067\uffab\071\uffab\072" +
    "\uffab\073\uffab\102\uffab\001\002\000\046\040\uff94\041\uff94" +
    "\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94\055\uff94\056" +
    "\uff94\063\130\064\122\065\120\066\127\067\124\071\uff94" +
    "\072\uff94\073\uff94\102\uff94\001\002\000\004\063\151\001" +
    "\002\000\004\064\150\001\002\000\062\040\uff9e\041\uff9e" +
    "\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051" +
    "\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e\062\uff9e" +
    "\063\uff9e\064\uff9e\065\uff9e\066\uff9e\067\uff9e\071\uff9e\072" +
    "\uff9e\073\uff9e\102\uff9e\001\002\000\062\040\uff9f\041\uff9f" +
    "\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051" +
    "\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\062\uff9f" +
    "\063\uff9f\064\uff9f\065\uff9f\066\uff9f\067\uff9f\071\uff9f\072" +
    "\uff9f\073\uff9f\102\uff9f\001\002\000\010\055\113\056\114" +
    "\071\153\001\002\000\034\040\uff97\041\uff97\043\uff97\044" +
    "\uff97\045\uff97\046\uff97\047\uff97\055\uff97\056\uff97\071\uff97" +
    "\072\uff97\073\uff97\102\uff97\001\002\000\004\102\155\001" +
    "\002\000\066\040\uff9b\041\uff9b\043\uff9b\044\uff9b\045\uff9b" +
    "\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054" +
    "\uff9b\055\uff9b\056\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b" +
    "\066\uff9b\067\uff9b\071\uff9b\072\uff9b\073\uff9b\074\157\076" +
    "\156\102\uff9b\001\002\000\004\102\164\001\002\000\004" +
    "\103\160\001\002\000\004\075\161\001\002\000\004\076" +
    "\162\001\002\000\004\102\163\001\002\000\062\040\uff9d" +
    "\041\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050" +
    "\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d" +
    "\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d\071" +
    "\uff9d\072\uff9d\073\uff9d\102\uff9d\001\002\000\062\040\uff9c" +
    "\041\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050" +
    "\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c" +
    "\062\uff9c\063\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c\071" +
    "\uff9c\072\uff9c\073\uff9c\102\uff9c\001\002\000\062\040\uffa8" +
    "\041\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050" +
    "\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8" +
    "\062\uffa8\063\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\071" +
    "\uffa8\072\uffa8\073\uffa8\102\uffa8\001\002\000\062\040\uffa6" +
    "\041\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050" +
    "\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6" +
    "\062\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\071" +
    "\uffa6\072\uffa6\073\uffa6\102\uffa6\001\002\000\034\040\uff98" +
    "\041\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047\uff98\055" +
    "\uff98\056\uff98\071\uff98\072\uff98\073\uff98\102\uff98\001\002" +
    "\000\004\062\201\001\002\000\030\042\105\057\076\060" +
    "\102\061\104\064\103\070\106\077\075\100\077\101\111" +
    "\102\107\103\100\001\002\000\006\062\176\063\151\001" +
    "\002\000\006\062\174\064\150\001\002\000\030\042\105" +
    "\057\076\060\102\061\104\064\103\070\106\077\075\100" +
    "\077\101\111\102\107\103\100\001\002\000\026\040\uff8c" +
    "\041\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\055" +
    "\113\056\114\102\uff8c\001\002\000\030\042\105\057\076" +
    "\060\102\061\104\064\103\070\106\077\075\100\077\101" +
    "\111\102\107\103\100\001\002\000\026\040\uff8d\041\uff8d" +
    "\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d\055\113\056" +
    "\114\102\uff8d\001\002\000\026\040\uff8e\041\uff8e\043\uff8e" +
    "\044\uff8e\045\uff8e\046\uff8e\047\uff8e\055\113\056\114\102" +
    "\uff8e\001\002\000\030\042\105\057\076\060\102\061\104" +
    "\064\103\070\106\077\075\100\077\101\111\102\107\103" +
    "\100\001\002\000\026\040\uff8b\041\uff8b\043\uff8b\044\uff8b" +
    "\045\uff8b\046\uff8b\047\uff8b\055\113\056\114\102\uff8b\001" +
    "\002\000\022\040\uffb9\041\uffb9\043\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\102\uffb9\001\002\000\004\102\205\001" +
    "\002\000\010\062\072\072\uffb8\073\uffb8\001\002\000\006" +
    "\072\uffb7\073\uffb7\001\002\000\030\042\105\057\076\060" +
    "\102\061\104\064\103\070\106\077\075\100\077\101\111" +
    "\102\107\103\100\001\002\000\010\055\113\056\114\071" +
    "\211\001\002\000\004\072\212\001\002\000\022\040\uff8a" +
    "\041\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a\102" +
    "\uff8a\001\002\000\022\040\uffbe\041\uffbe\043\uffbe\044\uffbe" +
    "\045\uffbe\046\uffbe\047\uffbe\102\uffbe\001\002\000\022\040" +
    "\uffc1\041\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1" +
    "\102\uffc1\001\002\000\052\005\uffc2\006\uffc2\007\uffc2\010" +
    "\uffc2\011\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2" +
    "\022\uffc2\023\uffc2\025\uffc2\026\uffc2\030\uffc2\031\uffc2\032" +
    "\uffc2\033\uffc2\041\uffc2\102\uffc2\001\002\000\022\040\uffbf" +
    "\041\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\102" +
    "\uffbf\001\002\000\022\040\uffc0\041\uffc0\043\uffc0\044\uffc0" +
    "\045\uffc0\046\uffc0\047\uffc0\102\uffc0\001\002\000\024\007" +
    "\221\011\226\015\227\016\233\021\222\032\234\033\236" +
    "\041\017\102\235\001\002\000\014\034\007\035\010\036" +
    "\012\037\011\054\013\001\002\000\012\005\uffea\006\uffea" +
    "\017\uffea\041\uffea\001\002\000\036\007\uffc9\011\uffc9\015" +
    "\uffc9\016\uffc9\021\uffc9\022\uffc9\025\uffc9\026\uffc9\030\uffc9" +
    "\031\uffc9\032\uffc9\033\uffc9\041\uffc9\102\uffc9\001\002\000" +
    "\036\007\uffc7\011\uffc7\015\uffc7\016\uffc7\021\uffc7\022\uffc7" +
    "\025\uffc7\026\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\041" +
    "\uffc7\102\uffc7\001\002\000\024\007\221\011\226\015\227" +
    "\016\233\021\320\032\250\033\252\041\017\102\251\001" +
    "\002\000\014\034\007\035\010\036\012\037\011\054\013" +
    "\001\002\000\014\034\007\035\010\036\012\037\011\054" +
    "\013\001\002\000\036\007\uffc8\011\uffc8\015\uffc8\016\uffc8" +
    "\021\uffc8\022\uffc8\025\uffc8\026\uffc8\030\uffc8\031\uffc8\032" +
    "\uffc8\033\uffc8\041\uffc8\102\uffc8\001\002\000\036\007\uffc4" +
    "\011\uffc4\015\uffc4\016\uffc4\021\uffc4\022\uffc4\025\uffc4\026" +
    "\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\041\uffc4\102\uffc4" +
    "\001\002\000\036\007\uffca\011\uffca\015\uffca\016\uffca\021" +
    "\uffca\022\uffca\025\uffca\026\uffca\030\uffca\031\uffca\032\uffca" +
    "\033\uffca\041\uffca\102\uffca\001\002\000\016\031\237\034" +
    "\007\035\010\036\012\037\011\054\013\001\002\000\036" +
    "\007\uffc5\011\uffc5\015\uffc5\016\uffc5\021\uffc5\022\uffc5\025" +
    "\uffc5\026\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\041\uffc5" +
    "\102\uffc5\001\002\000\036\007\uffc3\011\uffc3\015\uffc3\016" +
    "\uffc3\021\uffc3\022\uffc3\025\uffc3\026\uffc3\030\uffc3\031\uffc3" +
    "\032\uffc3\033\uffc3\041\uffc3\102\uffc3\001\002\000\036\007" +
    "\uffc6\011\uffc6\015\uffc6\016\uffc6\021\uffc6\022\uffc6\025\uffc6" +
    "\026\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\041\uffc6\102" +
    "\uffc6\001\002\000\036\007\uffd3\011\uffd3\015\uffd3\016\uffd3" +
    "\021\uffd3\022\uffd3\025\uffd3\026\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\041\uffd3\102\uffd3\001\002\000\022\007\221" +
    "\011\226\015\227\016\233\032\234\033\236\041\017\102" +
    "\235\001\002\000\024\007\221\011\226\015\227\016\233" +
    "\031\242\032\250\033\252\041\017\102\251\001\002\000" +
    "\036\007\uffd4\011\uffd4\015\uffd4\016\uffd4\021\uffd4\022\uffd4" +
    "\025\uffd4\026\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\041" +
    "\uffd4\102\uffd4\001\002\000\036\007\uffcf\011\uffcf\015\uffcf" +
    "\016\uffcf\021\uffcf\022\uffcf\025\uffcf\026\uffcf\030\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\041\uffcf\102\uffcf\001\002\000\036" +
    "\007\uffd1\011\uffd1\015\uffd1\016\uffd1\021\uffd1\022\uffd1\025" +
    "\uffd1\026\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\041\uffd1" +
    "\102\uffd1\001\002\000\036\007\uffd0\011\uffd0\015\uffd0\016" +
    "\uffd0\021\uffd0\022\uffd0\025\uffd0\026\uffd0\030\uffd0\031\uffd0" +
    "\032\uffd0\033\uffd0\041\uffd0\102\uffd0\001\002\000\036\007" +
    "\uffcc\011\uffcc\015\uffcc\016\uffcc\021\uffcc\022\uffcc\025\uffcc" +
    "\026\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\041\uffcc\102" +
    "\uffcc\001\002\000\036\007\uffd2\011\uffd2\015\uffd2\016\uffd2" +
    "\021\uffd2\022\uffd2\025\uffd2\026\uffd2\030\uffd2\031\uffd2\032" +
    "\uffd2\033\uffd2\041\uffd2\102\uffd2\001\002\000\036\007\uffcd" +
    "\011\uffcd\015\uffcd\016\uffcd\021\uffcd\022\uffcd\025\uffcd\026" +
    "\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\041\uffcd\102\uffcd" +
    "\001\002\000\036\007\uffcb\011\uffcb\015\uffcb\016\uffcb\021" +
    "\uffcb\022\uffcb\025\uffcb\026\uffcb\030\uffcb\031\uffcb\032\uffcb" +
    "\033\uffcb\041\uffcb\102\uffcb\001\002\000\036\007\uffce\011" +
    "\uffce\015\uffce\016\uffce\021\uffce\022\uffce\025\uffce\026\uffce" +
    "\030\uffce\031\uffce\032\uffce\033\uffce\041\uffce\102\uffce\001" +
    "\002\000\024\007\221\011\226\015\227\016\233\030\254" +
    "\032\234\033\236\041\017\102\235\001\002\000\036\007" +
    "\uffd5\011\uffd5\015\uffd5\016\uffd5\021\uffd5\022\uffd5\025\uffd5" +
    "\026\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\041\uffd5\102" +
    "\uffd5\001\002\000\024\007\221\011\226\015\227\016\233" +
    "\030\256\032\250\033\252\041\017\102\251\001\002\000" +
    "\036\007\uffd6\011\uffd6\015\uffd6\016\uffd6\021\uffd6\022\uffd6" +
    "\025\uffd6\026\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\041" +
    "\uffd6\102\uffd6\001\002\000\004\014\261\001\002\000\006" +
    "\014\314\024\313\001\002\000\014\034\007\035\010\036" +
    "\012\037\011\054\013\001\002\000\010\012\263\013\266" +
    "\027\267\001\002\000\014\034\007\035\010\036\012\037" +
    "\011\054\013\001\002\000\006\012\302\027\303\001\002" +
    "\000\006\013\274\027\275\001\002\000\014\034\007\035" +
    "\010\036\012\037\011\054\013\001\002\000\006\014\uffe0" +
    "\024\uffe0\001\002\000\024\007\221\011\226\015\227\016" +
    "\233\026\271\032\234\033\236\041\017\102\235\001\002" +
    "\000\006\013\uffd9\027\uffd9\001\002\000\024\007\221\011" +
    "\226\015\227\016\233\026\273\032\250\033\252\041\017" +
    "\102\251\001\002\000\006\013\uffda\027\uffda\001\002\000" +
    "\014\034\007\035\010\036\012\037\011\054\013\001\002" +
    "\000\006\014\uffe2\024\uffe2\001\002\000\024\007\221\011" +
    "\226\015\227\016\233\026\277\032\234\033\236\041\017" +
    "\102\235\001\002\000\006\013\uffdb\027\uffdb\001\002\000" +
    "\024\007\221\011\226\015\227\016\233\026\301\032\250" +
    "\033\252\041\017\102\251\001\002\000\006\013\uffdc\027" +
    "\uffdc\001\002\000\014\034\007\035\010\036\012\037\011" +
    "\054\013\001\002\000\006\014\uffe1\024\uffe1\001\002\000" +
    "\022\007\221\011\226\015\227\016\233\032\234\033\236" +
    "\041\017\102\235\001\002\000\024\007\221\011\226\015" +
    "\227\016\233\025\306\032\250\033\252\041\017\102\251" +
    "\001\002\000\006\012\uffdf\027\uffdf\001\002\000\024\007" +
    "\221\011\226\015\227\016\233\025\310\032\234\033\236" +
    "\041\017\102\235\001\002\000\006\012\uffdd\027\uffdd\001" +
    "\002\000\024\007\221\011\226\015\227\016\233\025\312" +
    "\032\250\033\252\041\017\102\251\001\002\000\006\012" +
    "\uffde\027\uffde\001\002\000\036\007\uffe4\011\uffe4\015\uffe4" +
    "\016\uffe4\021\uffe4\022\uffe4\025\uffe4\026\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\033\uffe4\041\uffe4\102\uffe4\001\002\000\014" +
    "\034\007\035\010\036\012\037\011\054\013\001\002\000" +
    "\004\013\266\001\002\000\006\013\274\027\317\001\002" +
    "\000\006\014\uffe3\024\uffe3\001\002\000\012\005\uffeb\006" +
    "\uffeb\017\uffeb\041\uffeb\001\002\000\022\007\322\011\226" +
    "\015\227\016\233\032\234\033\236\041\017\102\235\001" +
    "\002\000\050\007\uffd7\011\uffd7\015\uffd7\016\uffd7\021\uffd7" +
    "\022\uffd7\025\uffd7\026\uffd7\030\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\034\007\035\010\036\012\037\011\041\uffd7\054\013" +
    "\102\uffd7\001\002\000\024\007\221\011\226\015\227\016" +
    "\233\022\324\032\250\033\252\041\017\102\251\001\002" +
    "\000\036\007\uffd8\011\uffd8\015\uffd8\016\uffd8\021\uffd8\022" +
    "\uffd8\025\uffd8\026\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8" +
    "\041\uffd8\102\uffd8\001\002\000\004\101\326\001\002\000" +
    "\004\072\327\001\002\000\014\034\007\035\010\036\012" +
    "\037\011\054\013\001\002\000\056\005\uffe7\006\uffe7\007" +
    "\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\016\uffe7\017\uffe7\020\uffe7\021\uffe7\023\uffe7\025\uffe7\026" +
    "\uffe7\027\uffe7\030\uffe7\032\uffe7\033\uffe7\041\uffe7\102\uffe7" +
    "\001\002\000\004\101\332\001\002\000\004\072\333\001" +
    "\002\000\014\034\007\035\010\036\012\037\011\054\013" +
    "\001\002\000\056\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\023\uffe6\025\uffe6\026\uffe6\027\uffe6\030" +
    "\uffe6\032\uffe6\033\uffe6\041\uffe6\102\uffe6\001\002\000\004" +
    "\101\336\001\002\000\004\072\337\001\002\000\014\034" +
    "\007\035\010\036\012\037\011\054\013\001\002\000\056" +
    "\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8" +
    "\023\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\032\uffe8\033" +
    "\uffe8\041\uffe8\102\uffe8\001\002\000\004\101\342\001\002" +
    "\000\004\072\343\001\002\000\014\034\007\035\010\036" +
    "\012\037\011\054\013\001\002\000\056\005\uffe9\006\uffe9" +
    "\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015" +
    "\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\023\uffe9\025\uffe9" +
    "\026\uffe9\027\uffe9\030\uffe9\032\uffe9\033\uffe9\041\uffe9\102" +
    "\uffe9\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\004\004\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\023\006\022\007\017" +
    "\023\014\001\001\000\002\001\001\000\004\004\217\001" +
    "\001\000\020\024\054\025\052\026\060\027\066\032\051" +
    "\036\063\037\062\001\001\000\002\001\001\000\004\004" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\027\007\025\023\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\033\011\031\023\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\047\023\046\001\001\000\002" +
    "\001\001\000\004\004\036\001\001\000\006\012\041\023" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\025\213\026\060\027\066" +
    "\032\212\036\216\037\215\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\070" +
    "\001\001\000\002\001\001\000\014\031\107\032\072\033" +
    "\100\034\073\035\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\031\107\032\072\033" +
    "\100\034\073\035\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\031\107" +
    "\032\072\033\100\034\073\035\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\031\107\032\072\033\100\034\073\035\115\001" +
    "\001\000\014\031\107\032\072\033\100\034\073\035\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\031" +
    "\144\032\072\033\100\001\001\000\010\031\143\032\072" +
    "\033\100\001\001\000\010\031\142\032\072\033\100\001" +
    "\001\000\010\031\141\032\072\033\100\001\001\000\010" +
    "\031\140\032\072\033\100\001\001\000\010\031\137\032" +
    "\072\033\100\001\001\000\010\031\136\032\072\033\100" +
    "\001\001\000\010\031\135\032\072\033\100\001\001\000" +
    "\010\031\134\032\072\033\100\001\001\000\010\031\133" +
    "\032\072\033\100\001\001\000\002\001\001\000\010\031" +
    "\132\032\072\033\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\031" +
    "\107\032\072\033\100\034\073\035\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\031\107\032\072\033" +
    "\100\034\073\035\174\001\001\000\002\001\001\000\014" +
    "\031\107\032\072\033\100\034\073\035\176\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\031\107\032\072" +
    "\033\100\034\073\035\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\205\001\001" +
    "\000\002\001\001\000\014\031\107\032\072\033\100\034" +
    "\073\035\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\013\231\017\222\020\227\021\223\022\224\023\230\001" +
    "\001\000\004\004\320\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\013\246\017\243\020" +
    "\244\021\242\023\245\001\001\000\004\004\256\001\001" +
    "\000\004\004\252\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\237\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\013\231\017\222\020\227\021\223\022\240" +
    "\023\230\001\001\000\014\013\246\017\243\020\244\021" +
    "\242\023\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\013\231\017\222\020\227\021\223\022" +
    "\254\023\230\001\001\000\002\001\001\000\014\013\246" +
    "\017\243\020\244\021\242\023\245\001\001\000\002\001" +
    "\001\000\004\014\257\001\001\000\002\001\001\000\004" +
    "\004\261\001\001\000\006\015\263\016\264\001\001\000" +
    "\004\004\306\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\267\001\001\000\002\001\001\000\016\013" +
    "\231\017\222\020\227\021\223\022\271\023\230\001\001" +
    "\000\002\001\001\000\014\013\246\017\243\020\244\021" +
    "\242\023\245\001\001\000\002\001\001\000\004\004\275" +
    "\001\001\000\002\001\001\000\016\013\231\017\222\020" +
    "\227\021\223\022\277\023\230\001\001\000\002\001\001" +
    "\000\014\013\246\017\243\020\244\021\242\023\245\001" +
    "\001\000\002\001\001\000\004\004\303\001\001\000\002" +
    "\001\001\000\016\013\231\017\222\020\227\021\223\022" +
    "\304\023\230\001\001\000\014\013\246\017\243\020\244" +
    "\021\242\023\245\001\001\000\002\001\001\000\016\013" +
    "\231\017\222\020\227\021\223\022\310\023\230\001\001" +
    "\000\002\001\001\000\014\013\246\017\243\020\244\021" +
    "\242\023\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\314\001\001\000\004\016\315\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\013\231\017\222\020\227\021\223\022\322\023\230\001" +
    "\001\000\004\004\320\001\001\000\014\013\246\017\243" +
    "\020\244\021\242\023\245\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\327\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\333\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\337\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\343" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	private List<Falta> lista_error = new ArrayList<>();
	//public String nombre_clase="n/a";
    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
        +s.value + " no reconocido." );
		lista_error.add(new Falta(s.right+1,s.left+1,s.value.toString(),"desconocido",Falta.Tipo.SINTACTICO));
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("Error en la Línea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +
        s.value + " no reconocido.");
        System.out.println("Error sintactico:"+s);
    
    }
	public boolean hayFaltas(){
		return lista_error.size()>0;
	}
	
	public String getFaltas(){
		String salida="";
		for(Falta item:lista_error){
			salida+=item.errMsj();
		}
		return salida;
	}
	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {


    //public Nodo raiz=null;
    //String clase_actual;
	

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= INICIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= op_Html ATRIBUTO CUERPO cl_Html 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= op_Html ATRIBUTO cl_Html 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO ::= CUERPO HEAD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO ::= CUERPO BODY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO ::= CUERPO COMANDO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO ::= HEAD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO ::= BODY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO ::= COMANDO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // HEAD ::= op_Head ATRIBUTO CUERPO_HEAD cl_Head 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HEAD",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // HEAD ::= op_Head ATRIBUTO cl_Head 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HEAD",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPO_HEAD ::= CUERPO_HEAD COMANDO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_HEAD",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO_HEAD ::= CUERPO_HEAD TITULO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_HEAD",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPO_HEAD ::= COMANDO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_HEAD",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPO_HEAD ::= TITULO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_HEAD",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TITULO ::= op_Title ATRIBUTO CUERPO_TITULO cl_Title 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TITULO",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TITULO ::= op_Title ATRIBUTO cl_Title 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TITULO",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPO_TITULO ::= CUERPO_TITULO COMANDO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_TITULO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUERPO_TITULO ::= CUERPO_TITULO tk_Id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_TITULO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CUERPO_TITULO ::= COMANDO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_TITULO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CUERPO_TITULO ::= tk_Id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_TITULO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BODY ::= op_Body ATRIBUTO SENTENCIA cl_Body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BODY ::= op_Body ATRIBUTO cl_Body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ATRIBUTO ::= atributo_Color igual tk_Cadena p_coma ATRIBUTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ATRIBUTO ::= atributo_TextColor igual tk_Cadena p_coma ATRIBUTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ATRIBUTO ::= atributo_Align igual tk_Cadena p_coma ATRIBUTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ATRIBUTO ::= atributo_Font igual tk_Cadena p_coma ATRIBUTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ATRIBUTO ::= relacional_Mayor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TABLA ::= op_Table ATRIBUTO FILA cl_Table 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TABLA",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FILA ::= FILA op_Tr ATRIBUTO CELDA cl_Tr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FILA",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FILA ::= op_Tr ATRIBUTO CELDA cl_Tr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FILA",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FILA ::= op_Tr ATRIBUTO ENCABEZADO cl_Tr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FILA",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FILA ::= op_Tr ATRIBUTO cl_Tr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FILA",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ENCABEZADO ::= ENCABEZADO op_Th ATRIBUTO SENTENCIA cl_Th 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ENCABEZADO ::= op_Th ATRIBUTO SENTENCIA cl_Th 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ENCABEZADO ::= op_Th ATRIBUTO cl_Th 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CELDA ::= CELDA op_Td ATRIBUTO SENTENCIA cl_Td 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CELDA",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CELDA ::= CELDA op_Td ATRIBUTO cl_Td 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CELDA",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CELDA ::= op_Td ATRIBUTO SENTENCIA cl_Td 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CELDA",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CELDA ::= op_Td ATRIBUTO cl_Td 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CELDA",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SUBTITULO ::= op_Hnumber ATRIBUTO SENTENCIA cl_Hnumber 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBTITULO",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SUBTITULO ::= op_Hnumber ATRIBUTO op_Hnumber 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBTITULO",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DIV ::= op_Div ATRIBUTO SENTENCIA cl_Div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIV",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DIV ::= op_Div ATRIBUTO cl_Div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIV",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // P ::= op_P ATRIBUTO SENTENCIA cl_P 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // P ::= op_P cl_P 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA ::= SENTENCIA TABLA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA ::= SENTENCIA SUBTITULO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA ::= SENTENCIA DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA ::= SENTENCIA P 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA ::= SENTENCIA cl_Br 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA ::= SENTENCIA cl_Hr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA ::= SENTENCIA COMANDO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA ::= SENTENCIA tk_Id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA ::= TABLA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA ::= SUBTITULO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA ::= P 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA ::= cl_Br 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA ::= cl_Hr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA ::= COMANDO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIA ::= tk_Id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // COMANDO ::= res_Llave CUERPO_COMANDO res_Llave 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMANDO",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CUERPO_COMANDO ::= CUERPO_COMANDO DECLARACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_COMANDO",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CUERPO_COMANDO ::= CUERPO_COMANDO IMPLEMENTACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_COMANDO",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CUERPO_COMANDO ::= CUERPO_COMANDO PRINT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_COMANDO",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CUERPO_COMANDO ::= CUERPO_COMANDO AUMENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_COMANDO",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CUERPO_COMANDO ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_COMANDO",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CUERPO_COMANDO ::= IMPLEMENTACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_COMANDO",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CUERPO_COMANDO ::= PRINT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_COMANDO",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CUERPO_COMANDO ::= AUMENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_COMANDO",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION ::= ID p_coma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ID ::= ID coma tk_Id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ID ::= ID coma tk_Id ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ID ::= TIPODATO tk_Id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ID ::= TIPODATO tk_Id ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TIPODATO ::= tipo_Bool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TIPODATO ::= tipo_Char 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TIPODATO ::= tipo_Double 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TIPODATO ::= tipo_Int 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TIPODATO ::= tipo_String 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ASIGNACION ::= igual CONDICION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E ::= E mas E 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E ::= E menos E 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E ::= E por E 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E ::= E dividido E 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E ::= E modulo E 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E ::= tk_Numero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E ::= menos tk_Numero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E ::= tk_Entero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E ::= menos tk_Entero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E ::= tk_Cadena 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E ::= tk_Caracter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E ::= verdadero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E ::= falso 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E ::= AUMENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E ::= LLAMADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // AUMENTO ::= tk_Id mas mas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AUMENTO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // AUMENTO ::= tk_Id menos menos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AUMENTO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LLAMADA ::= res_Result punto tk_Id lBrack tk_Entero rBrack punto tk_Id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LLAMADA ::= res_Result punto tk_Id punto tk_Id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LLAMADA ::= res_Result punto tk_Id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CONDICION ::= CONDICION logico_Or CONDICION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CONDICION ::= CONDICION logico_And CONDICION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CONDICION ::= logico_Not CONDICION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CONDICION ::= lParen CONDICION rParen 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CONDICION ::= COMPARACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // COMPARACION ::= E relacional_Diferente E 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARACION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // COMPARACION ::= E relacional_Mayor E 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARACION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // COMPARACION ::= E relacional_MayorIgual E 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARACION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // COMPARACION ::= E relacional_Menor E 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARACION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // COMPARACION ::= E relacional_MenorIgual E 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARACION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // COMPARACION ::= E igual igual E 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARACION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // COMPARACION ::= E 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARACION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // IMPLEMENTACION ::= tk_Id igual CONDICION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMPLEMENTACION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // IMPLEMENTACION ::= tk_Id mas igual CONDICION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMPLEMENTACION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // IMPLEMENTACION ::= tk_Id menos igual CONDICION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMPLEMENTACION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // IMPLEMENTACION ::= tk_Id por igual CONDICION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMPLEMENTACION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PRINT ::= res_Print lParen CONDICION rParen p_coma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
